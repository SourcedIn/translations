--- !ruby/hash:Moped::BSON::Document
avg_user_rating: 4.422962226640159
classification: :lesson
created_at: 2012-09-19 14:32:04.000000000 Z
domain: :freestyle
down_votes: 402
entry: 这篇教程将介绍Ruby，一种面相对象的脚本语言。
  你可以单独使用Ruby，也可以在Ruby on Rails中使用。
feedback_total: 335
is_project: false
language_id: !ruby/object:Moped::BSON::ObjectId
  raw_data: !binary |-
    TyFOXyFuzxlcRMGV
level: :beginner
locale: zh
name: Ruby 简介
num_exercises: 16
num_published_exercises: 16
num_published_sections: 4
num_readiness_feedbacks: 182
num_sections: 4
num_user_ratings: 8048
published: true
published_at: 2012-09-20 01:46:12.000000000 Z
rating: 5622.819215045559
read_feedback_total: 250
readiness: 96.71794871794872
recommended: false
review_status: :approved
roles:
  manager: []
  editor: []
topic_id: !ruby/object:Moped::BSON::ObjectId
  raw_data: !binary |-
    T5Ws8pVtgwADABwX
total_user_rating: 35596.0
up_votes: 6066
updated_at: 2012-11-26 16:45:17.380000000 Z
user_id: !ruby/object:Moped::BSON::ObjectId
  raw_data: !binary |-
    TwTxhHBXEgADAGwS
sections:
- !ruby/hash:Moped::BSON::Document
  created_at: 2012-09-19 14:32:04.000000000 Z
  default_view: console_and_editor
  entry: Ruby是一门简洁清新并且有趣的语言。接下去我们先简要了解下Ruby的历史和用法，
    然后就开始动手写代码！这是一篇Ruby的入门教程，所以你没了解过Ruby也没关系。
  exercises:
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnXZeiJ4wACAAbJ
    created_at: 2012-09-19 14:32:05.000000000 Z
    default_code: ! '# 欢迎来到 Ruby 世界!'
    entry: ! 'Ruby是一门强大，灵活的编程语言，你可以用Ruby来做Web开发、文本处理、游戏开发，
      同时它也是Web开发框架Ruby on Rails的一部分。Ruby有如下特性：


      * **高级语言**, 读写Ruby就像写一般英语一样简单。


      * **解释执行**, 你不需要先编译再运行Ruby。你可以在Codecademy网站上直接写，
      或者在你自己电脑上（很多系统都预装了Ruby解释器，后续课程将有介绍）。 

      * **面向对象**, 用户在编程时可以用「对象」的形式来操纵数据结构。
      后面我们会介绍什么是对象，现在你只需知道，在Ruby里，*所有东西*都是对象。


      * **易用**. 1995年，松本行弘（Yukihiro Matsumoto，简称"Matz"）创造了Ruby。
      在设计之初，Ruby就主张从人的角度来让机器工作，强调易用性。


      本课程受众对象是没学过Ruby，甚至没学过编程/计算机的人。'
    expect_error: false
    feedback_stats:
      positive_feedback: 10
      total: 18
      other: 5
      correctness_test_issue: 3
    from_console: false
    hint: ''
    instruction: 准备好开学Ruby了吗？按一下绿色的「运行（Run）」按钮继续吧！
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 概览
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: return true
    updated_at: 2012-10-26 03:16:21.660000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnX3ibViwACAAtW
    created_at: 2012-09-19 14:34:06.000000000 Z
    default_code: ! 'my_num =     # 你的代码写这里！


      my_boolean =     # 这里！


      my_string =     # 还有这里！'
    entry: ! '在Ruby中，你的数据信息可以是不同类型的，现在我们马上来了解三种**数据类型**：
      **数字类型**、**布尔（真假）类型**、**字符串类型（比如："我正在学Ruby"）**


      计算机分析处理数据的速度非常快。为此，理解如何在程序中使用不同的数据结构尤为重要。

      注意：不要在给布尔类型套上引号（"true" 或者 ''false''都是不对的），
      否则Ruby会认为这是一个字符串类型的数据。此外，还要记住Ruby是英文字母大小写敏感的。'
    expect_error: false
    feedback_stats:
      instructional_text_issue: 5
      total: 23
      positive_feedback: 8
      other: 9
      correctness_test_issue: 1
    from_console: false
    hint: 在 `=` 右边写上相应的值就可以给`=`左边的变量赋值啦！
    instruction: ! '给下列变量设定相应的值：


      * 将`my_num` 赋值为 `25`

      * 将`my_boolean` 赋值为 `true`

      * 将`my_string` 赋值为 `"Ruby"` (注意大小写!)'
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: ! '数据类型: 数字类型, 字符串类型, 布尔类型'
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if code == nil\n  return \"你必须得输入点什么东西！\"\nend\n\nif
      exception.kind_of? SyntaxError\n  return \"请确保每个变量的值都放在其等号的后
      面\"\nend\n\nif my_num != 25\n  return \"你好像没有把 my_num 设为 25.\"\nend\n\nif
      !my_boolean\n  return \"你好像没有把 my_boolean 设为 true.\"\nend\n\nif my_string != \"Ruby\"\n
      \ return \"你好像没有把 my_string 设为 \\\"Ruby\\\".\"\nend\n\nreturn
      true"
    updated_at: 2012-11-24 06:47:14.760000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnX34qTxQACAAuI
    created_at: 2012-09-19 14:34:07.000000000 Z
    default_code: ''
    entry: ! "在编程中，其中一个最基本的概念是**变量**。
    
      **变量**是计算机编程中最基础的概念之一。你可以认为变量是一个存放值的地方，它有自己的名字。比如，
      上述例子中我们需要25这个值，但你并不是马上就要用到这个值，所以你先把25存放在一个变量里，
      比如叫这个变量为`my_num`，稍后再使用这个值：\n\n   my_num = 25\n\n在Ruby中声明变量非常简单：
      你只要给变量起一个名字，比如叫`my_num`，用等号`=`来赋予它一个值就可以啦！如果你想改变一个变量
      的值也非常简单，只要再输入这个变量名用等号`=`赋予它一个新的值就可以啦！"
    expect_error: false
    feedback_stats:
      instructional_text_issue: 3
      total: 16
      positive_feedback: 6
      other: 6
      correctness_test_issue: 1
    from_console: false
    hint: ''
    instruction: 将变量`my_num`的值设为`100`，然后按运行按钮把代码跑起来。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 变量
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if code == nil\n  return \"你必须得输入点什么东西！\"\nend\n\nbegin\n
      \ my_num\nrescue NameError\n  return \"你好像没有创建一个叫my_num的变量诶？\"\nend\n\nif
      my_num != 100\n  return \"你确定把100赋值给my_num了？\"\nend\n\nreturn
      true"
    updated_at: 2012-11-02 16:19:37.349000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnX4OiJ4wACAAuL
    created_at: 2012-09-19 14:34:08.000000000 Z
    default_code: ''
    entry: ! '除了像`my_num = 100`这样简单的表达值赋值，Ruby还可以有更自由的方式。你甚至可以
      将一个数学表达式赋给一个变量。


      如下是六个算术操作符：


      加 (`+`)

      减 (`-`)

      乘 (`*`)

      除 (`/`)

      取幂 (`**`)

      取模 (`%`)


      取幂和取模可能看起来有点晕。取幂的意思是将M(称作基数)自身相乘N(称作指数)次。如：`2**3`
      是`8`， `2**3` 即 "2 * 2 * 2" (3个2相乘)。 `3**2` 是 `9` (3 * 3)，诸如此类。


      取模的意思是让一个数与另一个数字相除，返回余数。如：`25 % 7` 是 `4`，因为25被3个7除
      后余4。'
    expect_error: false
    feedback_stats:
      positive_feedback: 6
      total: 23
      correctness_test_issue: 4
      other: 8
      instructional_text_issue: 5
    from_console: false
    hint: ''
    instruction: 在右侧编辑器中做几个数学练习吧。做好之后按运行进入下一个练习。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: Math
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if code == nil\n  return \"你必须得输入点什么东西！\"\nend\n\nif
      result == nil\n  return \"你必须得先计算点什么东西！\"\nend\n\nreturn true"
    updated_at: 2012-10-03 04:51:42.000000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnX4Zro+AACAAx3
    created_at: 2012-09-19 14:34:09.000000000 Z
    default_code: ''
    entry: ! "`print` 是输出语句，你输入什么东西非它，它就输出什么东西。`puts` (用于\"输入字符串\")
      有一些不同：它会在你要输出的内容末尾添加空行。如：\n\n
      \   puts \"干嘛？\"\n    print \"Oxnard Montalvo\"\n\n不需要逗号或括号！"
    expect_error: false
    feedback_stats:
      other: 14
      total: 59
      instructional_text_issue: 24
      correctness_test_issue: 6
      positive_feedback: 15
    from_console: false
    hint: ''
    instruction: ! '请在当前编辑器中至少使用一次`print`语句，至少一次`puts`语句。
      你可以随便输出什么内容！(记得给你想要输出的字符串套上双引号，像`"你好！"`。)'
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: ! '''puts'' 与 ''print'''
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if code == nil\n  return \"你必须得输入点什么东西！\"\nend\n\nif
      code.scan(\"print\").length == 0 || prints.length == 0\n  return \"是不是忘了练习
      一次print语句？\"\nend\n\nif code.scan(\"puts\").length == 0 || prints.length 
      == 0\n  return \"是不是忘了练习一次puts语句？\"\nend\n\nreturn true"
    updated_at: 2012-10-09 02:00:52.000000000 Z
    view: console_and_editor
  feedback_total: 139
  index: 0
  language_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TyFOXyFuzxlcRMGV
  name: 变量与数据类型
  num_forum_answers: 58
  num_forum_questions: 21
  published: true
  read_feedback_total: 9
  updated_at: 2012-11-24 06:47:14.788000000 Z
  user_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TwTxhHBXEgADAGwS
  viewable: false
- !ruby/hash:Moped::BSON::Document
  created_at: 2012-09-19 14:45:35.000000000 Z
  default_view: console_and_editor
  entry: 字符串有很多内建(自身支持)的功能，这些功能叫做方法，本节我们将学习用这些方法来控制文本！
  exercises:
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnakALvRgACADao
    created_at: 2012-09-19 14:45:36.000000000 Z
    default_code: ''
    entry: ! '因为Ruby中所有东西都是对象(以后会详细解释)，Ruby中所有东西都有
      一些内建的功能，我们称之为**方法**。你可以把方法理解为特定对象才有的"技能"。
      比如，字符串的内建方法包括：返回字符串长度、逆转字符串等。


      我们来解释下什么是**解释器**。解释器接收你写的代码并运行，你在**编辑器**中输入代码，
      解释器从中读出代码，并在**控制台**(右下方的窗口)中输出代码的运行结果。'
    expect_error: false
    feedback_stats:
      positive_feedback: 6
      total: 13
      typo: 1
      instructional_text_issue: 3
      other: 2
      correctness_test_issue: 1
    from_console: false
    hint: ''
    instruction: 废话少说。按运行按钮学习一下字符串方法吧！
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: Ruby之中，万物皆对象
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: return true
    updated_at: 2012-10-31 20:09:24.618000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnapa34sgACADrm
    created_at: 2012-09-19 14:45:57.000000000 Z
    default_code: ''
    entry: ! "方法都是被`.`召唤出来的。比如你有一个字符串，`\"I love espresso\"`,
      在其后紧跟`.length`，Ruby会返回这个字符串的长度(即字符串中字符、数字、空格、符号的个数)。
      试试:\n\n    \"I love espresso\".length\n    # ==> 15\n\n(这一行是以`#`开头的，井号
      并不是你要写的代码的一部分，这一行只是显示Ruby的输出结果。 下一节将会详细描述！)\n\n得到
      输入字符串的长度非常有用，比如你想做一个网站来处理信用卡卡号，就可以用Ruby来检查确保信用卡
      卡号是合法的。"
    expect_error: false
    feedback_stats:
      positive_feedback: 4
      total: 18
      instructional_text_issue: 3
      other: 7
      correctness_test_issue: 3
      typo: 1
    from_console: false
    hint: ''
    instruction: 对你的名字字符串调用`.length` (记得前后加上双引号)。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: '.length' 方法
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if code == nil\n  return \"你必须得输入点什么东西！\"\nend\n\nif
      code.scan(\".length\").length == 0\n  return \"请对你的名字调用 .length 方法！
      \"\nend\n\nreturn true"
    updated_at: 2012-10-18 13:37:24.084000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnappGJpQACAEKn
    created_at: 2012-09-19 14:45:58.000000000 Z
    default_code: ''
    entry: ! "`.reverse`方法的调用和 `.length`类似，但不是返回字符串的长度，而是返回一个
      逆序的当前字符串。比如：\n\n    \"你好\".reverse\n\n会得到\n\n    \"好你\"\n\n
      当你想要把一个从高到低排序(我们会在以后的课程中介绍排序。)的列表弄成从低到高，逆序将会非常有用。"
    expect_error: false
    feedback_stats:
      correctness_test_issue: 4
      total: 11
      positive_feedback: 2
      other: 4
      instructional_text_issue: 1
    from_console: false
    hint: ''
    instruction: 对你的名字调用`.reverse`方法。别忘了名字用双引号包起来！
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: '.reverse' 方法
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if code == nil\n  return \"你必须得输入点什么东西！\"\nend\n\nif
      exception.kind_of? SyntaxError\n  return \"是不是忘了给你的名字加上引号？如果遇到
      问题看以下左侧的例子。\"\nend\n\nif code.scan(\".reverse\").length == 0\n  return
      \"请对你的名字调用 .reverse 方法！\"\nend\n\nreturn true"
    updated_at: 2012-11-13 20:05:53.326000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnap5S4YAACADfu
    created_at: 2012-09-19 14:45:59.000000000 Z
    default_code: ''
    entry: 让我们来多试几个方法（额，两个吧）。你可能猜到了，`.upcase`和`.downcase`这两个
      方法依次将字符串中所有英文字母转成大写或小写。
    expect_error: false
    feedback_stats:
      positive_feedback: 6
      total: 31
      other: 8
      instructional_text_issue: 9
      typo: 2
      correctness_test_issue: 6
    from_console: false
    hint: ''
    instruction: ! "对你的英文名字调用`.upcase`把所有字母都变大写，再用`puts`打印出来，如：
      \n\n    puts \"eric\".upcase\n    # ==> ERIC\n\n接着，调用`.downcase`把你的英文名字
      变成全小写。别忘了用`puts`语句打印出来才能看到结果！"
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: ! '''.upcase'' 与 ''.downcase'''
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if code == nil\n  return \"你必须得输入点什么东西！\"\nend\n\nif
      code.scan(\".upcase\").length == 0\n  return \"记得对你的英文名字调用 .upcase
      方法。\"\nend\n\nif code.scan(\".downcase\").length == 0\n  return
      \"调用完.upcase 别忘了调用一遍 .downcase 方法！\"\nend\n\nif prints.length == 0\n
      return \"你好像忘了输出到终端里了！\"\nend\n\nreturn true"
    updated_at: 2012-10-30 11:40:18.908000000 Z
    view: console_and_editor
  feedback_total: 73
  index: 1
  language_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TyFOXyFuzxlcRMGV
  name: 字符串方法
  num_forum_answers: 14
  num_forum_questions: 8
  published: true
  read_feedback_total: 0
  updated_at: 2012-11-13 20:05:53.347000000 Z
  user_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TwTxhHBXEgADAGwS
  viewable: false
- !ruby/hash:Moped::BSON::Document
  created_at: 2012-09-19 14:53:07.000000000 Z
  default_view: console_and_editor
  entry: 到这一步你已经会写一些Ruby代码了，现在来了解一些编程规范和约定来帮助你写出
    清晰易读的代码。
  exercises:
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFncVLc8swACAEXP
    created_at: 2012-09-19 14:53:08.000000000 Z
    default_code: ''
    entry: ! "你可能已经在之前的练习中见过我们使用井号`#`。`#`在Ruby中用于**注释**。
      注释不会被当作代码执行：仅仅是方便人阅读代码用的。写好注释不仅能方便别人阅读
      你写的代码，还能帮助你很快回忆起几天、几个月、甚至几年前写的代码。\n\n 每一行中以`#`
      开头的内容都会被当作注释（稍后介绍如何注释多行内容）。试试如下代码：\n\n    # 我
      是一整行注释！\n    \"Eric\".length # 我也是注释！\n\n第二行会输出 `4`, 因为注释
      之前的内容会被执行。"
    expect_error: false
    feedback_stats:
      other: 6
      total: 11
      instructional_text_issue: 1
      correctness_test_issue: 3
      positive_feedback: 1
    from_console: false
    hint: ''
    instruction: 在编辑器中写一些注释，内容随意！
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 单行注释
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if code == nil\n  return \"你必须得输入点什么东西！\"\nend\n\nunless
      code.include? \"#\"\n  return \"别忘了用井号(#)来注释\"\nend\n\nreturn
      true"
    updated_at: 2012-10-17 09:34:40.935000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFncayQEDAACAFpV
    created_at: 2012-09-19 14:53:31.000000000 Z
    default_code: ''
    entry: ! "你可以给每行行首加上`#`来达到多行注释的效果，但是还有一种更简单的方法。
      你可以用`=begin`开头，`=end`结尾，这两个表达式之间的*全部内容*都会被当作注释。
      看看下面的例子：\n\n    =begin\n    我是注释！\n   我不需要井号# \n    =end\n\n
      不管`begin`还是`end`，和`=`之间都不能留空格。数学表达式(`2 + 5`和`2+5`是一样)
      之间是可以加空格的，但这里不行。另外，`=begin` 和 `=end`也需要分别单独一行，和
      上面例子里面一样。"
    expect_error: false
    feedback_stats:
      correctness_test_issue: 12
      total: 26
      instructional_text_issue: 5
      positive_feedback: 5
      other: 4
    from_console: false
    hint: ''
    instruction: 在右侧的编辑器中写一个多行注释。`=begin` 和 `=end`一定要单独一行！
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 多行注释
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if code == nil\n  return \"你必须得输入点什么东西！\"\nend\n\nif
      code.split(\"\\n\").grep(/^=begin$/).size == 0\n  return \"你好像没有写=begin，
      别忘了begin和=之间也不能加空格哦！\"\nend\n\nif code.split(\"\\n\").grep(/=end/).size == 0\n  return
      \"你的多行注释好像没有以=end结尾. 别忘了end和=之间也不能加空格哦！\"\nend\n\nreturn true"
    updated_at: 2012-11-14 04:47:37.366000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFncbiQEDAACAFp4
    created_at: 2012-09-19 14:53:34.000000000 Z
    default_code: ''
    entry: 接下去的课程中你会遇到各种不同的变量，但是现在我们只要知道**局部变量**就好了。
      规范来讲，变量都是以小写字母表示，单词之间用下划线连接，如`counter`和`masterful_method`。
      Ruby中局部变量也可以以其他符号开头，如大小字母、`$`符号、`@`符号，但是这些有特殊含义，
      所以最好还是避免违背Ruby社区制定的规范。
    expect_error: false
    feedback_stats:
      correctness_test_issue: 5
      total: 18
      positive_feedback: 7
      other: 3
      instructional_text_issue: 3
    from_console: false
    hint: ! "还记得怎么定义一个字符串变量嘛？像这样：\n\n
      \   some_variable = \"Your string here!\""
    instruction: ! '在编辑器中定义一个叫`name`的变量，将其设为你的英文名字（用双引号包起来，
        如 `"Eric"`）。 你的名字可以以大写字母开头，但是`name`必须全是小写！'
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 命名规范
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if code == nil\n  return \"你必须得输入点什么东西！\"\nend\n\nbegin\n
      \ name\nrescue NameError\n  return \"有定义一个叫name的变量嘛？？\"\nend\n\nunless
      name.is_a? String\n  return \"你定义的name变量好像不是字符串类型的数据。\"\nend\n\nreturn true"
    updated_at: 2012-10-24 23:02:54.195000000 Z
    view: console_and_editor
  feedback_total: 55
  index: 2
  language_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TyFOXyFuzxlcRMGV
  name: 写「好」代码
  num_forum_answers: 14
  num_forum_questions: 6
  published: true
  read_feedback_total: 8
  updated_at: 2012-11-14 04:47:37.395000000 Z
  user_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TwTxhHBXEgADAGwS
  viewable: false
- !ruby/hash:Moped::BSON::Document
  created_at: 2012-09-19 14:56:01.000000000 Z
  default_view: console_and_editor
  entry: 非常好！现在我们来回顾下已经学过的Ruby语法。
  exercises:
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFndAlCxegACAFwh
    created_at: 2012-09-19 14:56:02.000000000 Z
    default_code: ''
    entry: 我们来快速回顾下如何声明和设定变量。记住，声明变量就是给它取一个名字，
      然后用`=`给它赋值。如果需要任何帮助你可以随时点击下面的**提示**。
    expect_error: false
    feedback_stats:
      typo: 3
      total: 7
      other: 4
    from_console: false
    hint: ! "记住，像这样声明变量：\n\n    variable_name\n\n像这样给变量赋值：
      \n\n    name = \"Eric\"\n    age = 26\n    hungry = true"
    instruction: 创建一个叫`my_name`的变量，将它赋值为你名字的字符串。创建第二个变量，
        叫`my_age`，将它设为一个数字（数字是不用加双引号的哦）。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 变量与数据类型
    tabs: []
    test_functions: ! "if code == nil\n  return \"你必须得输入点什么东西！\"\nend\n\nbegin\n
      \ my_name\nrescue NameError\n  return \"你有声明一个叫my_name的变量嘛？\"\nend\n\nbegin\n
      \ my_age\nrescue NameError\n  return \"你有声明一个叫my_age的变量嘛？\"\nend\n\nunless
      my_name.is_a? String\n  return \"你声明的my_name变量好像不是字符串类型的哦。\"\nend\n\nunless
      my_age.is_a? Integer\n  return \"你声明的my_age变量好像不是数字(integer)类型的哦。\"\nend\n\nreturn true"
    updated_at: 2012-11-06 22:46:40.105000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFndGZS4YAACAFvW
    created_at: 2012-09-19 14:56:25.000000000 Z
    default_code: ''
    entry: 很好！来做点数学吧！
    expect_error: false
    feedback_stats:
      positive_feedback: 1
      total: 13
      instructional_text_issue: 5
      typo: 1
      correctness_test_issue: 4
      other: 2
    from_console: false
    hint: ''
    instruction: ! '在编辑器中，定义如下变量：


      * `sum`等于`13 + 379`

      * `product`等于`923 * 15`

      * `quotient`等于`13209 / 17`'
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 数学
    tabs: []
    test_functions: ! "if code == nil\n  return \"你必须得输入点什么东西！\"\nend\n\nbegin\n
      \ sum\nrescue NameError\n  return \"你有定义一个叫sum的变量吗？\"\nend\n\nbegin\n
      \ product\nrescue NameError\n  return \"你有定义一个叫product的变量吗？\"\nend\n\nbegin\n
      \ quotient\nrescue NameError\n  return \"你有定义一个叫quotient的变量嘛？\"\nend\n\nif
      sum != 13 + 379 || code.scan(\"+\").length == 0\n  return \"sum的值好像不正确。你是把它
      设定为 13 + 379吗？「+」有没有加？\"\nend\n\nif product != 923 * 15 || code.scan(\"*\").length
      == 0\n  return \"product的值好像不正确，你是把它设定为923 * 15吗？「*」有没有加？\"\nend\n\nif
      quotient != 13209 / 17 || code.scan(\"/\").length == 0\n  return \"quotient的值好像不正确。
      你是把它设定为13209 / 17吗？「/」有没有加？\"\nend\n\nreturn true"
    updated_at: 2012-10-24 23:06:03.475000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFndHybViwACAFfc
    created_at: 2012-09-19 14:56:31.000000000 Z
    default_code: ''
    entry: ! '很好！我们来复习下字符串方法吧！记住，通过`.`操作符来调用一个方法，
        像这样：`"string".method`。'
    expect_error: false
    feedback_stats:
      positive_feedback: 4
      total: 26
      instructional_text_issue: 8
      correctness_test_issue: 7
      other: 7
    from_console: false
    hint: ! "比如你的名字是 \"Steve,\" 于是你输入\n\n    name =
      \"Steve\".downcase\n\n来把你的名字弄成全小写 `\"steve\"`."
    instruction: ! "定义一个`name`变量，将其设为包含你英文名字的字符串。调用`.downcase`
      把你的名字转换成全小写，调用`.reverse`将全小写后的英文名字逆序，再调用`.upcase`
      将你逆序后的名字全部大写。\n\nRuby中，你可以以两种方式达到：每一个方法都在单独一行
      中调用，或者你*把他们连起来*，像这样：\n\n    name.method1.method2.method3"
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 字符串与字符串方法
    tabs: []
    test_functions: ! "if code == nil\n  return \"你必须得输入点什么东西！\"\nend\n\nbegin\n
      \ name\nrescue NameError\n  return \"你有定义一个叫name的变量吗？\"\nend\n\nif
      exception.kind_of? SyntaxError\n  return \"你的语法好像不太对哦！看看提示或许有帮助！\"\nend\n\nif
      code.scan(\".downcase\").length == 0\n  return \"你好像没有对你的名字调用.downcase方法哦。\"\nend\n\nif
      code.scan(\".reverse\").length == 0\n  return \"你好像没有对你的名字调用.reverse方法哦。\"\nend\n\nif 
      code.scan(\".upcase\").length == 0\n  return \"你好像没有对你的名字调用.upcase方法哦。\"\nend\n\nreturn
      true"
    updated_at: 2012-10-16 01:20:14.732000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFndIJS4YAACAFxS
    created_at: 2012-09-19 14:56:32.000000000 Z
    default_code: ''
    entry: 棒极了！本次课程的最后一个练习，让我们来回顾下单行注释和多行注释。
    expect_error: false
    feedback_stats:
      correctness_test_issue: 6
      total: 22
      positive_feedback: 9
      other: 4
      typo: 1
      instructional_text_issue: 2
    from_console: false
    hint: 记住，单行注释是以`#`开头，多行注释以`=begin`(`=`与`begin`之间没有空格！)，
      `=end`结尾，`=begin`和`=end`都要单独一行。
    instruction: 在右侧编辑器中创建一个单行注释，一个多行租户是(如果忘了语法就查看下提示) 。
      按一下「运行」按钮看一下你棒极了的注释来结束Ruby入门课程吧！
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 注释
    tabs: []
    test_functions: ! "if code == nil\n  return \"你必须得输入点什么东西！\"\nend\n\nif
      exception.kind_of? SyntaxError\n  return \"你的语法好像不太对，查看下提示或许
      有帮助哦！ \"\nend\n\nunless code.include? \"#\"\n  return \"你好像没有用#创建
      单行注释哦。\"\nend\n\nif code.split(\"\\n\").grep(/^=begin$/).size == 0\n  
      return \"你好像没有写=begin。别忘了=和begin之间不能有空格！\"\nend\n\nif 
      code.split(\"\\n\").grep(/=end/).size == 0\n  return \"你的注释块好像没有以=end结尾。
      别忘了=和end之间不能有空格！\"\nend\n\nreturn true"
    updated_at: 2012-10-15 14:17:39.748000000 Z
    view: console_and_editor
  feedback_total: 68
  index: 3
  language_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TyFOXyFuzxlcRMGV
  name: 复习
  num_forum_answers: 12
  num_forum_questions: 10
  published: true
  read_feedback_total: 11
  updated_at: 2012-11-06 22:46:40.137000000 Z
  user_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TwTxhHBXEgADAGwS
  viewable: false
