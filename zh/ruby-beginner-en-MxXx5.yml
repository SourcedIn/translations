--- !ruby/hash:Moped::BSON::Document
avg_user_rating: 4.39453125
classification: :game
created_at: 2012-09-19 15:37:00.000000000 Z
domain: :freestyle
down_votes: 213
entry: 既然你已经对Ruby有所了解，那么让我们用所学内容做第一个项目吧！
  在这个项目中，我们将写一个小程序，该程序格式化用户的输入。
feedback_total: 149
is_project: false
language_id: !ruby/object:Moped::BSON::ObjectId
  raw_data: !binary |-
    TyFOXyFuzxlcRMGV
level: :beginner
locale: zh
name: Putting the Form in Formatter
num_exercises: 7
num_published_exercises: 7
num_published_sections: 1
num_readiness_feedbacks: 96
num_sections: 1
num_user_ratings: 6016
published: true
published_at: 2012-09-20 03:25:29.000000000 Z
rating: 851.6800701947286
read_feedback_total: 85
readiness: 91.47058823529412
recommended: false
review_status: :approved
roles:
  manager: []
  editor: []
submitted_at: 2012-09-20 01:47:05.000000000 Z
topic_id: !ruby/object:Moped::BSON::ObjectId
  raw_data: !binary |-
    T5Ws8pVtgwADABwX
total_user_rating: 26437.5
up_votes: 1095
updated_at: 2012-11-26 16:45:19.308000000 Z
user_id: !ruby/object:Moped::BSON::ObjectId
  raw_data: !binary |-
    TwTxhHBXEgADAGwS
sections:
- !ruby/hash:Moped::BSON::Document
  created_at: 2012-09-19 15:37:00.000000000 Z
  default_view: console_and_editor
  entry: 我们将利用Ruby强大的字符串格式化方法来格式化用户的输入。我们不要错误的首字母大写！
  exercises:
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnmnQYJ4QACAPRz
    created_at: 2012-09-19 15:37:01.000000000 Z
    default_code: ! 'print "What''s your first name?"

      first_name = gets.chomp

      first_name.capitalize!


      print "What''s your last name?"

      last_name = gets.chomp

      last_name.capitalize!


      print "What city are you from?"

      city = gets.chomp

      city.capitalize!


      print "What state or province are you from?"

      state = gets.chomp

      state.upcase!


      puts "Your name is #{first_name} #{last_name} and you''re from #{city}, #{state}!"'
    entry: 这个项目将帮助你创建一个小程序，该程序读取用户的输入，然后纠正其首字母大写错误。
      用户可以输入几乎任何内容，所以为了降低编程难度，我们要将用户的输入标准化。
    expect_error: false
    feedback_stats:
      positive_feedback: 6
      total: 16
      correctness_test_issue: 3
      other: 7
    from_console: false
    hint: ''
    instruction: 阅读编辑器中的代码——我们添加了一些新东西，我们稍后会教你这些内容。你能猜出它的功能是什么吗？单击Run看看！
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 你将要建造的东西
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: return true
    updated_at: 2012-11-02 08:44:31.637000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnm3KnplwACAQTq
    created_at: 2012-09-19 15:38:04.000000000 Z
    default_code: ''
    entry: 首先，让我们来编写我们熟悉的代码。为了获得用户的输入，我们先要使用`print`来向屏幕打印提示。
    expect_error: false
    feedback_stats:
      positive_feedback: 2
      total: 3
      correctness_test_issue: 1
    from_console: false
    hint: ''
    instruction: ! '使用`print`向屏幕打印一个问题`"What''s your first name?"`。
      如果忘记了语法，可随时查看第一个练习。'
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 提示用户
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if code == nil\n  return \"你没有编写任何代码！\"\nend\n\nunless
      code.include? \"print\"\n  return \"确保使用'print'关键字。\"\nend\n\nif
      prints.length == 0\n  return \"貌似你没有向控制台打印任何东西。
      \"\nend\n\nreturn true"
    updated_at: 2012-10-12 11:02:17.423000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnm3ZS4YAACAPO1
    created_at: 2012-09-19 15:38:05.000000000 Z
    default_code: ''
    entry: ! "好！现在，让我们尝试一些新东西。你可能注意到我们示例中有一行诡异的代码一直重复：
      \n\n    variable_name = gets.chomp\n\n
      `gets`是用来 *获取* 用户输入的Ruby方法。在获取输入的时候，Ruby自动地在每个输入后面添加一个空行（或者叫 **新行** ）；
      `chomp`方法则去掉那个多余的行。（没有`chomp`，你的程序也能正常工作，不过你会发现到处都是多余的空行。）"
    expect_error: false
    feedback_stats:
      other: 6
      total: 15
      instructional_text_issue: 3
      correctness_test_issue: 4
      positive_feedback: 2
    from_console: false
    hint: ''
    instruction: 声明一个变量`first_name`，然后将其赋值为`gets.chomp`。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: true
    name: 获取输入
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "begin\n  first_name\nrescue NameError\n  return \"你声明了一个名叫first_name的变量吗？
      \"\nend\n\nif code.scan(\"gets.chomp\").length
      == 0\n  return \"貌似你的代码没有使用gets.chomp。\"\nend\n\nreturn
      true"
    updated_at: 2012-11-02 08:50:51.929000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnm4oqTxQACAPNc
    created_at: 2012-09-19 15:38:10.000000000 Z
    default_code: ''
    entry: 好的！现在，我们需要为`last_name`、`city`和`state`这些变量编写同样的代码。
    expect_error: false
    feedback_stats:
      other: 11
      total: 36
      correctness_test_issue: 17
      instructional_text_issue: 5
      typo: 2
      positive_feedback: 1
    from_console: false
    hint: ''
    instruction: ! '使用`print`来打印提示，使用`gets.chomp`来获取用户输入并将其赋值给用户的
      last name、city和state/province变量。使用`last_name`来存放用户的姓氏，
      `city`存放所在城市，`state`存放所在州或省。
      （提示：向用户提示将州或省的名称写成缩写的形式，例如New York写成"NY"。这样，我们后面就会想到用`.upcase`方法！）'
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: true
    name: 用同样的方式输入更多内容
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "begin\n  last_name\nrescue NameError\n  return \"你声明了一个名为last_name的变量吗？
      \"\nend\n\nbegin\n  city\nrescue NameError\n  return
      \"你声明了一个名为city的变量吗？\"\nend\n\nbegin\n  state\nrescue NameError\n
      \ return \"你声明了一个名为state的变量吗？\"\nend\n\nif code.scan(\"print\").length
      < 4\n  return \"在获取每个变量之前你都使用了一个print语句来打印提示吗？\"\nend\n\nif
      code.scan(\"gets.chomp\").length < 4\n  return \"你使用了gets.chomp来获取每个用户输入吗？
      \"\nend\n\nreturn true"
    updated_at: 2012-11-02 08:54:22.270000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnm5CbViwACAO6S
    created_at: 2012-09-19 15:38:12.000000000 Z
    default_code: ''
    entry: ! "你可能已经注意到，Ruby并没有做我们的输入作出回应。
      我们想要立即看到我们输入字符串的情况！
      要达到这个目的，我们需要一个新的语法。\n\n
      如果你定义了一个变量`monkey`，然后令其等于字符串`\"孙悟空\"`，然后你写一个这样的字符串：
      `\"我把#{monkey}带到了南天门\"`，Ruby就会进行一种叫做 **字符串插入替换** 的操作，
      将`#{monkey}`替换成`monkey`的值——也就是说，它会打印`\"我把孙悟空带到了南天门\"`。
      我们可以做类似这样的事情！比如：\n\n    first_name = \"张三\"\n    puts \"我的名字叫#{first_name}！\"\n\n
      上述代码将会打印\"我的名字叫张三！\""
    expect_error: false
    feedback_stats:
      instructional_text_issue: 5
      total: 29
      other: 7
      correctness_test_issue: 11
      typo: 4
      positive_feedback: 2
    from_console: false
    hint: ! "记住，字符串插入替换操作永远用在引号里面，像这样：
      \n\n    n = \"肥肠\"\n    puts \"#{n}\"\n    puts \"我喜欢吃#{n}！\""
    instruction: 让我们使用`#{}`语法来打印`first_name`、`last_name`、`city`和`state`的值。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: true
    name: 打印输出
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if exception.kind_of? SyntaxError\n  return \"貌似你的语法不大正确。如需帮助可查看提示！\"\nend\n\nif
      code.scan('#{').length == 0 || code.scan('}').length == 0\n  return '确保
      使用#{}来进行字符串插入替换！'\nend\n\nif prints.length == 0\n  return
      \"貌似你没有向控制台打印任何东西。\"\nend\n\nreturn true"
    updated_at: 2012-11-02 09:05:21.897000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnm5UeBkwACAPfz
    created_at: 2012-09-19 15:38:13.000000000 Z
    default_code: ''
    entry: ! 'Great! Now we''ve got our output, but as you can see, we haven''t used
      string methods to properly capitalize everything yet.


      We taught you about `.upcase` and `.downcase`, but there''s another really useful
      string method: `.capitalize`. It capitalizes the first letter of a string and
      makes the rest of the letters lower case. Convenient, right?


      Here''s another handy trick. When you call something like `.capitalize` on a
      string, you''re not capitalizing that *exact* string; Ruby makes a *copy* of
      the string, capitalizes *that*, and that''s what it returns. If you want to
      capitalize the string you''ve already got, though, you can make one small change:
      add a `!` to the end of the method name. `.capitalize!` capitalizes the string
      **in-place** instead of making a copy. The original non-capitalized string is
      gone forever, but now you have your shiny new capitalized one in its place.'
    expect_error: false
    feedback_stats:
      correctness_test_issue: 14
      total: 29
      other: 9
      positive_feedback: 3
      instructional_text_issue: 2
      typo: 1
    from_console: false
    hint: ''
    instruction: After each `print` prompt and `gets.chomp`, add the appropriate string
      method. You'll want `.capitalize!` for `first_name`, `last_name`, and `city`,
      but since we want the user to provide an abbreviation for their state or province,
      it's best to use `.upcase!` for that one.
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: true
    name: Formatting with String Methods
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if code.scan(\".capitalize!\").length < 3\n  return \"Make
      sure to call capitalize! on first_name, last_name, and city.\"\nend\n\nif code.scan(\".upcase!\").length
      == 0\n  return \"Make sure to call upcase! on state.\"\nend\n\nif prints.length
      == 0\n  return \"It looks like you didn't print anything to the console.\"\nend\n\nreturn
      true"
    updated_at: 2012-11-13 09:34:58.857000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnm5pGJpQACAQIB
    created_at: 2012-09-19 15:38:14.000000000 Z
    default_code: ''
    entry: Perfect! In just a few short steps, you've created your own Ruby program
      with real-world applications. Feel free to add to your program or change it
      as much as you like.
    expect_error: false
    feedback_stats:
      positive_feedback: 11
      total: 21
      typo: 1
      correctness_test_issue: 3
      other: 4
      instructional_text_issue: 2
    from_console: false
    hint: ''
    instruction: When you're ready, click Run to complete this project.
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: true
    name: Great Work!
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: return true
    updated_at: 2012-11-04 12:59:08.016000000 Z
    view: console_and_editor
  feedback_total: 149
  index: 0
  language_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TyFOXyFuzxlcRMGV
  name: Methods, Methods Everywhere
  num_forum_answers: 68
  num_forum_questions: 36
  published: true
  read_feedback_total: 13
  updated_at: 2012-11-13 09:34:58.899000000 Z
  user_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TwTxhHBXEgADAGwS
  viewable: false
