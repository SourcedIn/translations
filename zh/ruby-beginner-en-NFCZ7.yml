--- !ruby/hash:Moped::BSON::Document
avg_user_rating: 4.381258023106547
classification: :lesson
created_at: 2012-09-19 15:55:55.000000000 Z
domain: :freestyle
down_votes: 225
entry: 我们已经知道怎样编写简单的程序，现在让我们学习编写复杂一点的程序：对用户输入作出响应。
feedback_total: 123
is_project: false
language_id: !ruby/object:Moped::BSON::ObjectId
  raw_data: !binary |-
    TyFOXyFuzxlcRMGV
level: :beginner
locale: zh
name: Ruby的控制流
num_exercises: 17
num_published_exercises: 17
num_published_sections: 4
num_readiness_feedbacks: 60
num_sections: 4
num_user_ratings: 3895
published: true
published_at: 2012-09-20 03:25:45.000000000 Z
rating: 1142.0995318486207
read_feedback_total: 69
readiness: 80.92857142857143
recommended: false
review_status: :approved
roles:
  manager: []
  editor: []
submitted_at: 2012-09-20 01:47:06.000000000 Z
topic_id: !ruby/object:Moped::BSON::ObjectId
  raw_data: !binary |-
    T5Ws8pVtgwADABwX
total_user_rating: 17065.0
up_votes: 1400
updated_at: 2012-11-26 16:45:12.094000000 Z
user_id: !ruby/object:Moped::BSON::ObjectId
  raw_data: !binary |-
    TwTxhHBXEgADAGwS
sections:
- !ruby/hash:Moped::BSON::Document
  created_at: 2012-09-19 15:55:55.000000000 Z
  default_view: console_and_editor
  entry: 控制流让程序可以对其所处环境的变化作出响应，这些变化可能是来自于用户、本地变量或者是其它程序。好了，让我们开始吧！
  exercises:
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnrDJro+AACATQ9
    created_at: 2012-09-19 15:55:56.000000000 Z
    default_code: ! "print \"请输入整数：\"\nuser_num = Integer(gets.chomp)\n\nif
      user_num < 0\n  puts \"你输入了一个负整数！\"\nelsif user_num > 0\n
      \ puts \"你输入了一个正整数！\"\nelse\n  puts \"你输入了零！\"\nend"
    entry: ! '你可能已经注意到迄今为止我们所写的Ruby程序都不大灵活。
      没错，这些程序接受用户的输入，但是它们总是输出一样的结果；
      它们并不改变自身行为来响应 **环境** （一个程序中特定时间内所有变量及其值的集合）。


      **控制流** 使程序具有了灵活性。我们可以根据用户输入的信息来输出不同的内容：一个计算结果，或是由程序的另一个部分返回的值。'
    expect_error: false
    feedback_stats:
      instructional_text_issue: 1
      total: 8
      positive_feedback: 2
      correctness_test_issue: 4
      other: 1
    from_console: false
    hint: ''
    instruction: 阅读编辑器中的代码。我们用到了一些新语法，不过我们相信你可以看懂。
      单击Run来看看程序执行的结果！（然后输入一个整数——也就是说一个负数或者整数，不带小数点。）
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 工作原理
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if exception.kind_of? ArgumentError\n  return \"确保输入一个整数！\"\nend\n\nreturn true"
    updated_at: 2012-10-20 17:11:49.373000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnsDoqTxQACAUdn
    created_at: 2012-09-19 16:00:14.000000000 Z
    default_code: ''
    entry: ! "Ruby的`if`语句使用一个 **expression** 作为判断条件。如果表达式的值是`true`，则Ruby执行紧跟`if`语句的代码块。
      如果其值不是真（也就是说是`false`），那么Ruby不执行那个代码块：
      它跳过该代码块到达下面的语句。\n\n下面是`if`语句的一个例子：\n\n
      if 1 < 2\n      print \"我正在被打印出来，因为1小于2！\"\n    end\n\n
      Ruby对 **空白** （空格和空行）不感兴趣，所以打印语句的缩进不是 *必须的* 。
      不过Ruby程序员都遵循这个惯例，所以最好养成这个好习惯。
      紧跟`if`后面的代码块应该缩进两个空格。\n\n
      当你完成`if`语句时，应该以`end`来结尾。"
    expect_error: false
    feedback_stats:
      correctness_test_issue: 3
      total: 8
      other: 2
      positive_feedback: 2
      instructional_text_issue: 1
    from_console: false
    hint: ''
    instruction: 在编辑器中写你自己的`if`语句。你可以给它写任何表达式作为判断条件（甚至是`true`！），
      但该表达式的值必须是`true`。然后，在随后的代码块中打印一个字符串（随便你写什么）到控制台（使用`print`或`puts`）。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: if
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if code == nil\n  return \"你没有写任何代码！\"\nend\n\nif
      code.scan(\"if\").length == 0\n  return \"确保使用'if'语句！\"\nend\n\nif
      exception.kind_of? SyntaxError\n  return \"貌似你的'if'语句语法不大正确。
      如需帮助可查看左边的例程！\"\nend\n\nif
      prints.length == 0\n  return \"貌似你没有向控制台打印任何东西。\"\nend\n\nreturn true"
    updated_at: 2012-10-02 03:40:05.000000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnsD5S4YAACAUgi
    created_at: 2012-09-19 16:00:15.000000000 Z
    default_code: ''
    entry: ! "`if`语句的搭档是`else`语句。一个`if`/`else`语句的含义是：
      \"如果这个表达式的值是真，那么运行这个代码块；否则，运行`else`语句后面的代码块。\" 下面是一个例子：\n\n
      if 1 > 2\n      print \"我不会被打印，因为1小于2。\"\n    else\n
      \     print \"我会被打印！\"\n    end\n"
    expect_error: false
    feedback_stats:
      other: 2
      total: 3
      correctness_test_issue: 1
    from_console: false
    hint: ''
    instruction: 你自己在编辑器中试一试！你可以在`if`/`else`语句中使用任何表达式，
      只是要确保在两个分支中都打印一个字符串（随便写什么）到控制台。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: true
    name: else
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if exception.kind_of? SyntaxError\n  return \"貌似你的语法不大正确。如需帮助可查看左边的例程！
      \"\nend\n\nif code.scan(\"if\").length == 0 || code.scan(\"else\").length
      == 0\n  return \"貌似你没有同时使用'if'和'else'。\"\nend\n\nif
      prints.length == 0\n  return \"貌似你没有向控制台打印任何东西。\"\nend\n\nreturn true"
    updated_at: 2012-10-01 01:04:41.000000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnsEIqTxQACAUe7
    created_at: 2012-09-19 16:00:16.000000000 Z
    default_code: ''
    entry: ! "假如你想要更多的选择情况，该怎么做呢？这时可以用`elsif`！
      `elsif`语句可以向`if`/`else`语句增加无限个选择，像这样：\n\n    if x < y  # 假设x和y均已定义\n      puts
      \"x小于y！\"\n    elsif x > y\n      puts \"x大于y！\"\n
      \   else\n      puts \"x等于y！\"\n    end\n"
    expect_error: false
    feedback_stats:
      correctness_test_issue: 2
      total: 16
      instructional_text_issue: 10
      positive_feedback: 2
      other: 1
      typo: 1
    from_console: false
    hint: ''
    instruction: 在编辑器中向你的`if`/`else`语句添加一个`elsif`代码块。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: true
    name: Elsif
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if code.scan(\"elsif\").length == 0\n  return \"貌似你没有写elsif语句。
      \"\nend\n\nif exception.kind_of? SyntaxError\n
      \ return \"貌似你的'elsif'代码块不大正确。如需帮助可查看左边的例程！\"\nend\n\nreturn true"
    updated_at: 2012-11-02 12:33:22.806000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnsEQYJ4QACAUz+
    created_at: 2012-09-19 16:00:17.000000000 Z
    default_code: ! "hungry = false\n\n___ ___\n  puts \"我正在编写Ruby程序！\"\n___\n
      \ puts \"该吃饭啦！\"\n___"
    entry: ! "有时候你可能想要在某个条件为 *假* 而不是为真的情况下执行操作。
      当然，你可以将`if`/`else`反过来写，不过Ruby提供了一个更好的选择：`unless`语句。\n\n
      比如说你不想吃东西， *除非* 你饿了。也就是说，当你不饿的时候，你写程序；当你饿的时候，你吃东西。写成Ruby程序就是这样：
      \n\n    unless hungry\n      # 写一些优美的程序\n
      \   else\n      # 吃个包子\n    end"
    expect_error: false
    feedback_stats:
      other: 3
      total: 11
      instructional_text_issue: 5
      positive_feedback: 1
      correctness_test_issue: 2
    from_console: false
    hint: ''
    instruction: 我们在编辑器中写了一部分代码。用正确的`unless`语句代码替换`___`，
      使得程序打印出`"我正在编写Ruby程序！"`
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: unless
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if exception.kind_of? SyntaxError\n  return \"确保用正确的unless语句替换__！\"\nend\n\nif
      code.scan(\"unless\").length == 0\n  return \"貌似你没有写unless语句。
      \"\nend\n\nif code.scan(\"end\").length == 0\n  return \"别忘了以'end'结束你的unless语句！\"\nend\n\nreturn true"
    updated_at: 2012-11-24 16:36:25.552000000 Z
    view: console_and_editor
  feedback_total: 46
  index: 0
  language_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TyFOXyFuzxlcRMGV
  name: 控制流入门
  num_forum_answers: 24
  num_forum_questions: 16
  published: true
  read_feedback_total: 4
  updated_at: 2012-11-24 16:36:25.600000000 Z
  user_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TwTxhHBXEgADAGwS
  viewable: false
- !ruby/hash:Moped::BSON::Document
  created_at: 2012-09-19 15:56:59.000000000 Z
  default_view: console_and_editor
  entry: 你可能已经注意到Ruby可以使用“>”和“<”来比较数值大小。这些符号称为比较运算符或者关系操作符，而Ruby还有许多这样的符号！
  exercises:
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnrTgLvRgACATx/
    created_at: 2012-09-19 15:57:02.000000000 Z
    default_code: ! 'is_true = 2 __ 3


      is_false = 2 __ 3'
    entry: ! "在Ruby中，我们为变量赋值时使用`=`，即 **赋值运算符** 。
      既然我们已经使用`=`来赋值，那么我们用什么符号来检查两个值是否相等呢？
      我们使用`==`，即 **比较运算符** （也叫做 **关系操作符** ）。
      `==`的意思是\"等于\"。当你键入：\n\n    x = 2\n    y = 2\n    if x == y\n      print \"x和y是相等的！\"\n    end\n\n
      这段代码的意思是：\"如果x等于y，则打印'x和y是相等的！'\" 同时，你可以使用`!=`来检查两个值是否 *不相等* 。"
    expect_error: false
    feedback_stats:
      instructional_text_issue: 1
      total: 7
      positive_feedback: 3
      correctness_test_issue: 1
      other: 2
    from_console: false
    hint: ''
    instruction: ! '我们在编辑器中有两个变量：`is_true`和`is_false`。
      将`__`替换为`==`或`!=`，使得`is_true`的值为`true`，`is_false`的值为`false`。'
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 相等还是不相等？
    tabs: []
    test_functions: ! "if code.scan(\"!=\").length == 0\n  return \"貌似你没有在代码中使用!=。
      \"\nend\n\nif code.scan(\"==\").length == 0\n
      \ return \"貌似你没有在代码中使用==。\"\nend\n\nunless is_true\n
      \ return \"貌似is_true的值是false。它应该是true！\"\nend\n\nif is_false\n
      \ return \"貌似is_false的值是true。它应该是false！\"\nend\n\nreturn
      true"
    updated_at: 2012-11-02 12:25:27.310000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnujUeBkwACAXBJ
    created_at: 2012-09-19 16:10:53.000000000 Z
    default_code: ! 'test_1 = 17 __ 16


      test_2 = 21 __ 30


      test_3 = 9 __ 9


      test_4 = -11 __ 4'
    entry: ! '我们还可以检查数值之间小于、小于等于、大于和大于等于的情况，如下所示：


      * 小于：`<`

      * 小于等于：`<=`

      * 大于：`>`

      * 大于等于：`>=`

'
    expect_error: false
    feedback_stats:
      typo: 2
      total: 10
      instructional_text_issue: 1
      other: 3
      correctness_test_issue: 2
      positive_feedback: 2
    from_console: false
    hint: ''
    instruction: ! '我们在编辑器中写了一些变量。我们希望这些变量的值都为`true`。
      你的任务：将`__`替换为`<`、`<=`、`>`或者`>=`，使得每个表达式的值都是真！'
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 小于还是大于
    tabs: []
    test_functions: ! "if exception.kind_of? SyntaxError\n  return \"确保将每个
      __替换成一个比较运算符。\"\nend\n\nif !test_1\n  return \"貌似
      test_1的值是假。使它的值为真！\"\nend\n\nif !test_2\n  return \"貌似
      test_2的值是假。使它的值为真！\"\nend\n\nif !test_3\n  return \"貌似
      test_3的值是假。使它的值为真！\"\nend\n\nif !test_4\n  return \"貌似
      test_4的值是假。使它的值为真！\"\nend\n\nif code.scan(\"<\").length ==
      0 || code.scan(\">\").length == 0\n  return \"确保在每个表达式中使用比较运算符。
      \"\nend\n\nif code.scan(\"==\").length > 0 || code.scan(\"!=\").length
      > 0\n  return \"请不要在这个练习中使用!=或==——还是使用<、>、<=和>=吧。\"\nend\n\nreturn true"
    updated_at: 2012-10-11 06:41:42.371000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnukp9eKgACAVIk
    created_at: 2012-09-19 16:10:58.000000000 Z
    default_code: ! "# test_1 = 77 != 77\ntest_1 = \n\n# test_2 = -4 <= -4\ntest_2
      = \n\n# test_3 = -44 < -33\ntest_3 = \n\n# test_4 = 100 == 1000\ntest_4 = "
    entry: ! '干得好！俗话说：熟能生巧。让我们再试几个比较运算以确认你已经掌握这些东西。'
    expect_error: false
    feedback_stats:
      other: 5
      total: 13
      correctness_test_issue: 4
      instructional_text_issue: 2
      positive_feedback: 2
    from_console: false
    hint: ''
    instruction: ! '这一次，我们给出比较运算，而你则根据你对表达式所预期的值给每个变量赋值为`true`或`false`。
      记住：`true`和`false`两边没有引号！'
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 熟能生巧
    tabs: []
    test_functions: ! "if exception.kind_of? SyntaxError\n  return \"确保在每个=后面键入true或false！
      \"\nend\n\nunless code.include? \"true\"\n  return
      \"貌似布尔值'true'没有出现在你的代码里。\"\nend\n\nunless
      code.include? \"false\"\n  return \"貌似布尔值'false'没有出现在你的代码里。\"\nend\n\nif test_1\n  return \"貌似
      你给test_1赋的值不正确。\"\nend\n\nif !test_2\n  return \"貌似
      你给test_2赋的值不正确。\"\nend\n\nif !test_3\n  return \"貌似
      你给test_3赋的值不正确。\"\nend\n\nif test_4\n  return \"貌似
      你给test_4赋的值不正确。\"\nend\n\nreturn true"
    updated_at: 2012-11-02 12:25:52.399000000 Z
    view: console_and_editor
  feedback_total: 30
  index: 1
  language_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TyFOXyFuzxlcRMGV
  name: 作比较
  num_forum_answers: 9
  num_forum_questions: 7
  published: true
  read_feedback_total: 5
  updated_at: 2012-11-02 12:25:52.421000000 Z
  user_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TwTxhHBXEgADAGwS
  viewable: false
- !ruby/hash:Moped::BSON::Document
  created_at: 2012-09-19 15:57:06.000000000 Z
  default_view: console_and_editor
  entry: 比较数值大小在Ruby中是重要的，但是如果我们想要一次检查多个条件，该怎么做呢？
    比如，假如我们想要检查是否x和y都为真，或者检查是否x或y都为真，该怎么做？此时我们需要布尔操作符。
  exercises:
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnrU1CxegACAUBT
    created_at: 2012-09-19 15:57:07.000000000 Z
    default_code: ! "# boolean_1 = 77 < 78 && 77 < 77\nboolean_1 = \n\n# boolean_2
      = true && 100 >= 100\nboolean_2 = \n\n# boolean_3 = 2**3 == 8 && 3**2 == 9\nboolean_3
      = "
    entry: ! "比较运算符并不是Ruby中仅有的操作符，你还可以使用 **逻辑操作符** 或者称为 **布尔操作符** 。
      Ruby有三个布尔操作符：与运算符（`&&`）、或运算符（`||`）以及非运算符（`!`）。
      布尔操作符的运算结果是布尔值：`true`或者`false`。\n\n
      布尔操作符 **与** （`&&`）仅在其两边的表达式均为`true`时结果为`true`。下面演示了`&&`的例子：\n\n
      \   true && true # => true\n    true && false # => false\n    false && true
      # => false\n    false && false # => false\n\n
      例如：`1 < 2 && 2 < 3`得到`true`，因为1小于2 **而且** 2小于3."
    expect_error: false
    feedback_stats:
      positive_feedback: 4
      total: 9
      instructional_text_issue: 1
      typo: 1
      other: 2
      correctness_test_issue: 1
    from_console: false
    hint: ''
    instruction: 让我们来练习使用`&&`。查看每个布尔表达式，然后根据你的判断将每个变量赋值为`true`或者`false`。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 与运算
    tabs: []
    test_functions: ! "if exception.kind_of? SyntaxError\n  return \"确保在每个=后面键入true或者false！
      \"\nend\n\nif boolean_1\n  return \"貌似你给boolean_1赋的值不正确。\"\nend\n\nif !boolean_2\n  return
      \"貌似你给boolean_2赋的值不正确。\"\nend\n\nif !boolean_3\n
      \ return \"貌似你给boolean_3赋的值不正确。\"\nend\n\nreturn
      true"
    updated_at: 2012-11-02 12:24:55.145000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnyQ59eKgACAYoL
    created_at: 2012-09-19 16:26:43.000000000 Z
    default_code: ! "# boolean_1 = 2**3 != 3**2 || true\nboolean_1 = \n\n# boolean_2
      = false || -10 > -9\nboolean_2 = \n\n# boolean_3 = false || false\nboolean_3
      = "
    entry: ! "Ruby还具有 **或** 运算（`||`）。Ruby的`||`符号称为 **或逻辑运算** ，
      因为当符号两端的表达式只要有一个为真，它就得到`true`。
      如下所示：\n\n    true || true # => true\n    true || false # =>
      true\n    false || true # => true\n    false || false # => false\n"
    expect_error: false
    feedback_stats:
      other: 1
      total: 4
      positive_feedback: 3
    from_console: false
    hint: ''
    instruction: 根据你对表达式的值的判断，设置每个变量的值为`true`或者`false`。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 或运算
    tabs: []
    test_functions: ! "if exception.kind_of? SyntaxError\n  return \"确保在每个=后面键入true或者false！
      \"\nend\n\nif !boolean_1\n  return \"貌似
      你给boolean_1赋的值不正确。\"\nend\n\nif boolean_2\n  return
      \"貌似你给boolean_2赋的值不正确。\"\nend\n\nif boolean_3\n
      \ return \"貌似你给boolean_3赋的值不正确。\"\nend\n\nreturn
      true"
    updated_at: 2012-11-02 12:27:40.905000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnyRFCxegACAani
    created_at: 2012-09-19 16:26:44.000000000 Z
    default_code: ! "# boolean_1 = !true\nboolean_1 = \n\n# boolean_2 = !true && !true\nboolean_2
      = \n\n# boolean_3 = !(700 / 10 == 70)\nboolean_3 = "
    entry: ! "最后，Ruby还有一个布尔操作符 **非运算符** （`!`）。`!`使得`true`变成`false`，反之亦然。
      \n\n    !true # => false\n    !false # => true\n"
    expect_error: false
    feedback_stats:
      positive_feedback: 2
      total: 2
    from_console: false
    hint: ''
    instruction: 根据你对表达式的判断，将每个变量赋值为`true`或者`false`。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 非运算
    tabs: []
    test_functions: ! "if exception.kind_of? SyntaxError\n  return \"确保在每个=后面键入true或者false！
      \"\nend\n\nif boolean_1\n  return \"貌似
      你给boolean_1赋的值不正确。\"\nend\n\nif boolean_2\n  return
      \"貌似你给boolean_2赋的值不正确。\"\nend\n\nif boolean_3\n
      \ return \"貌似你给boolean_3赋的值不正确。\"\nend\n\nreturn
      true"
    updated_at: 2012-11-02 12:29:44.192000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnyS0eBkwACAaik
    created_at: 2012-09-19 16:26:51.000000000 Z
    default_code: ! "# boolean_1 = (3 < 4 || false) && (false || true)\nboolean_1
      = \n\n# boolean_2 = !true && (!true || 100 != 5**2)\nboolean_2 = \n\n# boolean_3
      = true || !(true || false)\nboolean_3 = "
    entry: ! "你可以将几个布尔操作符结合起来使用，像这样：
      \n\n    (x && (y || w)) && z\n\n
      这个表达式不仅是合法的，而且是非常有用的。\n\n
      你可能需要一些时间来适应这种用法，不过你随时可以使用括弧来控制计算优先级。
      括弧内的表达式总是比外面的先计算。"
    expect_error: false
    feedback_stats:
      correctness_test_issue: 1
      total: 9
      instructional_text_issue: 2
      other: 3
      positive_feedback: 3
    from_console: false
    hint: ''
    instruction: 最后一个！根据你对表达式的判断，将每个变量赋值为`true`或者`false`。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 多个布尔操作符结合起来
    tabs: []
    test_functions: ! "if exception.kind_of? SyntaxError\n  return \"确保在每个=后面键入true或者false！
      \"\nend\n\nunless boolean_1\n  return \"貌似
      你给boolean_1赋的值不正确。\"\nend\n\nif boolean_2\n  return
      \"貌似你给boolean_2赋的值不正确。\"\nend\n\nunless boolean_3\n
      \ return \"貌似你给boolean_3赋的值不正确。\"\nend\n\nreturn
      true"
    updated_at: 2012-11-02 12:39:05.278000000 Z
    view: console_and_editor
  feedback_total: 24
  index: 2
  language_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TyFOXyFuzxlcRMGV
  name: 布尔操作符
  num_forum_answers: 13
  num_forum_questions: 8
  published: true
  read_feedback_total: 6
  updated_at: 2012-11-02 12:39:05.310000000 Z
  user_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TwTxhHBXEgADAGwS
  viewable: false
- !ruby/hash:Moped::BSON::Document
  created_at: 2012-09-19 15:57:11.000000000 Z
  default_view: console_and_editor
  entry: 让我们复习一下我们学习的Ruby新语法。
  exercises:
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnrWZVv1gACATPZ
    created_at: 2012-09-19 15:57:13.000000000 Z
    default_code: ''
    entry: ! '干得很好！到目前为止，我们学习了：


      * `if`、`else`和`elsif`的使用方法

      * 比较运算符/关系操作符`==`、`!=`、`<`、`<=`、`>`和`>=`的使用方法

      * 布尔/逻辑操作符`&&`、`||`和`!`的使用方法'
    expect_error: false
    feedback_stats:
      instructional_text_issue: 1
      total: 2
      positive_feedback: 1
    from_console: false
    hint: ''
    instruction: 花点时间来复习所学内容。当你准备好以后，单击Run来开始复习练习。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 干得漂亮！
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: return true
    updated_at: 2012-10-14 22:48:13.077000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFoCra34sgACAoVx
    created_at: 2012-09-19 17:36:45.000000000 Z
    default_code: ''
    entry: 太好了！你已经自学成才。（如果需要语法提醒，可查看提示。）
    expect_error: false
    feedback_stats:
      instructional_text_issue: 2
      total: 5
      typo: 2
      other: 1
    from_console: false
    hint: ! "`if`/`elsif`/`else`的语法是这样的：\n\n    if expression\n
      \     # 做一些事情\n    elsif expression\n      # 做一些其它事情\n    else\n
      \     # 再做另外一些事情\n    end"
    instruction: 在编辑器中编写一个`if`/`else`语句。确保带有至少一个
      `elsif`。每个分支语句都要向控制台打印一些东西。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: if、else和elsif
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if code == nil\n  return \"你没有编写任何代码！\"\nend\n\nif
      exception.kind_of? SyntaxError\n  return \"貌似你的语法不大正确。如需帮助可查看提示！
      \"\nend\n\nif code.scan(\"if\").length
      == 0\n  return \"确保写了'if'语句！\"\nend\n\nif code.scan(\"elsif\").length
      == 0\n  return \"你写了至少一个'elsif'吗？\"\nend\n\nif code.scan(\"else\").length
      == 0\n  return \"别忘了'else'！\"\nend\n\nif prints.length == 0\n
      \ return \"貌似你没有向控制台打印任何东西。\"\nend\n\nreturn
      true"
    updated_at: 2012-10-09 18:40:53.125000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFoCsqnplwACApAN
    created_at: 2012-09-19 17:36:50.000000000 Z
    default_code: ''
    entry: Good! Now let's review the `unless` statement.
    expect_error: false
    feedback_stats:
      instructional_text_issue: 2
      total: 2
    from_console: false
    hint: ! "Remember, `unless` syntax looks like this:\n\n    unless condition\n
      \     # Do something!\n    end\n\nFor `unless`, the `# Do something!` bit will
      execute if the condition evaluates to `false`."
    instruction: Create an `unless` statement in the editor. The statement should
      print something to the console.
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: Unless
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if code == nil\n  return \"You gotta type something!\"\nend\n\nif
      exception.kind_of? SyntaxError\n  return \"It looks like your syntax isn't quite
      right. Check the Hint if you need help!\"\nend\n\nif code.scan(\"unless\").length
      == 0\n  return \"Make sure to include an 'unless' statement!\"\nend\n\nif prints.length
      == 0\n  return \"It looks like you didn't print anything to the console.\"\nend\n\nreturn
      true"
    updated_at: 2012-10-01 01:16:02.000000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFoCs7c8swACAman
    created_at: 2012-09-19 17:36:51.000000000 Z
    default_code: ! "# test_1 should be false\ntest_1 = \n\n# test_2 = should be false\ntest_2
      = \n\n# test_3 = should be true\ntest_3 = "
    entry: Now let's review comparators / relational operators. We've turned the tables
      a bit!
    expect_error: false
    feedback_stats:
      instructional_text_issue: 3
      total: 8
      typo: 4
      correctness_test_issue: 1
    from_console: false
    hint: Remember, comparators are `==`, `!=`, `>`, `>=`, `<`, and `<=`.
    instruction: We're letting you know what value (`true` or `false`) we want each
      variable to have, and your job is to add an expression that evaluates to the
      correct value using comparators.
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: Dare to Compare
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if code == nil\n  return \"You gotta type something!\"\nend\n\nif
      exception.kind_of? SyntaxError\n  return \"Make sure to put an expression after
      each =!\"\nend\n\nif code.scan(\">\").length == 0 && code.scan(\"<\").length
      == 0 && code.scan(\"!=\").length == 0 && code.scan(\"==\").length == 0\n  return
      \"Make sure to use comparators in your expressions.\"\nend\n\nif test_1\n  return
      \"It looks like your value for test_1 isn't correct.\"\nend\n\nif test_2\n  return
      \"It looks like your value for test_2 isn't correct.\"\nend\n\nif !test_3\n
      \ return \"It looks like your value for test_3 isn't correct.\"\nend\n\nreturn
      true"
    updated_at: 2012-11-10 23:44:54.095000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFoC1gYJ4QACApdQ
    created_at: 2012-09-19 17:37:26.000000000 Z
    default_code: ! "# test_1 should be true\ntest_1 = \n\n# test_2 = should be true\ntest_2
      = \n\n# test_3 = should be false\ntest_3 = "
    entry: Home stretch! Let's go over boolean operators.
    expect_error: false
    feedback_stats:
      correctness_test_issue: 1
      total: 6
      typo: 2
      instructional_text_issue: 1
      other: 1
      positive_feedback: 1
    from_console: false
    hint: ''
    instruction: The code in the editor indicates what value (`true` or `false`) we
      want each variable to have, and your job is to add an expression that evaluates
      to the correct value using boolean operators (`&&`, `||`, or `!`).
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: Billions of Booleans
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if code == nil\n  return \"You gotta type something!\"\nend\n\nif
      exception.kind_of? SyntaxError\n  return \"Make sure to put an expression after
      each =!\"\nend\n\nif code.scan(\"&&\").length == 0 && code.scan(\"||\").length
      == 0 && code.scan(\"!\").length == 0\n  return \"Make sure to use boolean operators
      in your expressions.\"\nend\n\nunless test_1\n  return \"It looks like your
      value for test_1 isn't correct.\"\nend\n\nunless test_2\n  return \"It looks
      like your value for test_2 isn't correct.\"\nend\n\nif test_3\n  return \"It
      looks like your value for test_3 isn't correct.\"\nend\n\nreturn true"
    updated_at: 2012-11-10 23:42:35.097000000 Z
    view: console_and_editor
  feedback_total: 23
  index: 3
  language_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TyFOXyFuzxlcRMGV
  name: Review
  num_forum_answers: 16
  num_forum_questions: 11
  published: true
  read_feedback_total: 5
  updated_at: 2012-11-10 23:44:54.141000000 Z
  user_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TwTxhHBXEgADAGwS
  viewable: false
