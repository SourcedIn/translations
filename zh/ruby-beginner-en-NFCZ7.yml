--- !ruby/hash:Moped::BSON::Document
avg_user_rating: 4.381258023106547
classification: :lesson
created_at: 2012-09-19 15:55:55.000000000 Z
domain: :freestyle
down_votes: 225
entry: 我们已经知道怎样编写简单的程序，现在让我们学习编写复杂一点的程序：对用户输入作出响应。
feedback_total: 123
is_project: false
language_id: !ruby/object:Moped::BSON::ObjectId
  raw_data: !binary |-
    TyFOXyFuzxlcRMGV
level: :beginner
locale: zh
name: Ruby的控制流
num_exercises: 17
num_published_exercises: 17
num_published_sections: 4
num_readiness_feedbacks: 60
num_sections: 4
num_user_ratings: 3895
published: true
published_at: 2012-09-20 03:25:45.000000000 Z
rating: 1142.0995318486207
read_feedback_total: 69
readiness: 80.92857142857143
recommended: false
review_status: :approved
roles:
  manager: []
  editor: []
submitted_at: 2012-09-20 01:47:06.000000000 Z
topic_id: !ruby/object:Moped::BSON::ObjectId
  raw_data: !binary |-
    T5Ws8pVtgwADABwX
total_user_rating: 17065.0
up_votes: 1400
updated_at: 2012-11-26 16:45:12.094000000 Z
user_id: !ruby/object:Moped::BSON::ObjectId
  raw_data: !binary |-
    TwTxhHBXEgADAGwS
sections:
- !ruby/hash:Moped::BSON::Document
  created_at: 2012-09-19 15:55:55.000000000 Z
  default_view: console_and_editor
  entry: 控制流让程序可以对其所处环境的变化作出响应，这些变化可能是来自于用户、本地变量或者是其它程序。好了，让我们开始吧！
  exercises:
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnrDJro+AACATQ9
    created_at: 2012-09-19 15:55:56.000000000 Z
    default_code: ! "print \"请输入整数：\"\nuser_num = Integer(gets.chomp)\n\nif
      user_num < 0\n  puts \"你输入了一个负整数！\"\nelsif user_num > 0\n
      \ puts \"你输入了一个正整数！\"\nelse\n  puts \"你输入了零！\"\nend"
    entry: ! '你可能已经注意到迄今为止我们所写的Ruby程序都不大灵活。
      没错，这些程序接受用户的输入，但是它们总是输出一样的结果；
      它们并不改变自身行为来响应 **环境** （一个程序中特定时间内所有变量及其值的集合）。


      **控制流** 使程序具有了灵活性。我们可以根据用户输入的信息来输出不同的内容：一个计算结果，或是由程序的另一个部分返回的值。'
    expect_error: false
    feedback_stats:
      instructional_text_issue: 1
      total: 8
      positive_feedback: 2
      correctness_test_issue: 4
      other: 1
    from_console: false
    hint: ''
    instruction: 阅读编辑器中的代码。我们用到了一些新语法，不过我们相信你可以看懂。
      单击Run来看看程序执行的结果！（然后输入一个整数——也就是说一个负数或者整数，不带小数点。）
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 工作原理
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if exception.kind_of? ArgumentError\n  return \"确保输入一个整数！\"\nend\n\nreturn true"
    updated_at: 2012-10-20 17:11:49.373000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnsDoqTxQACAUdn
    created_at: 2012-09-19 16:00:14.000000000 Z
    default_code: ''
    entry: ! "Ruby的`if`语句使用一个 **expression** 作为判断条件。如果表达式的值是`true`，则Ruby执行紧跟`if`语句的代码块。
      如果其值不是真（也就是说是`false`），那么Ruby不执行那个代码块：
      它跳过该代码块到达下面的语句。\n\n下面是`if`语句的一个例子：\n\n
      if 1 < 2\n      print \"我正在被打印出来，因为1小于2！\"\n    end\n\n
      Ruby对 **空白** （空格和空行）不感兴趣，所以打印语句的缩进不是 *必须的* 。
      不过Ruby程序员都遵循这个惯例，所以最好养成这个好习惯。
      紧跟`if`后面的代码块应该缩进两个空格。\n\n
      当你完成`if`语句时，应该以`end`来结尾。"
    expect_error: false
    feedback_stats:
      correctness_test_issue: 3
      total: 8
      other: 2
      positive_feedback: 2
      instructional_text_issue: 1
    from_console: false
    hint: ''
    instruction: 在编辑器中写你自己的`if`语句。你可以给它写任何表达式作为判断条件（甚至是`true`！），
      但该表达式的值必须是`true`。然后，在随后的代码块中打印一个字符串（随便你写什么）到控制台（使用`print`或`puts`）。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: if
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if code == nil\n  return \"你没有写任何代码！\"\nend\n\nif
      code.scan(\"if\").length == 0\n  return \"确保使用'if'语句！\"\nend\n\nif
      exception.kind_of? SyntaxError\n  return \"貌似你的'if'语句语法不大正确。
      如需帮助可查看左边的例程！\"\nend\n\nif
      prints.length == 0\n  return \"貌似你没有向控制台打印任何东西。\"\nend\n\nreturn true"
    updated_at: 2012-10-02 03:40:05.000000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnsD5S4YAACAUgi
    created_at: 2012-09-19 16:00:15.000000000 Z
    default_code: ''
    entry: ! "`if`语句的搭档是`else`语句。一个`if`/`else`语句的含义是：
      \"如果这个表达式的值是真，那么运行这个代码块；否则，运行`else`语句后面的代码块。\" 下面是一个例子：\n\n
      if 1 > 2\n      print \"我不会被打印，因为1小于2。\"\n    else\n
      \     print \"我会被打印！\"\n    end\n"
    expect_error: false
    feedback_stats:
      other: 2
      total: 3
      correctness_test_issue: 1
    from_console: false
    hint: ''
    instruction: 你自己在编辑器中试一试！你可以在`if`/`else`语句中使用任何表达式，
      只是要确保在两个分支中都打印一个字符串（随便写什么）到控制台。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: true
    name: else
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if exception.kind_of? SyntaxError\n  return \"貌似你的语法不大正确。如需帮助可查看左边的例程！
      \"\nend\n\nif code.scan(\"if\").length == 0 || code.scan(\"else\").length
      == 0\n  return \"貌似你没有同时使用'if'和'else'。\"\nend\n\nif
      prints.length == 0\n  return \"貌似你没有向控制台打印任何东西。\"\nend\n\nreturn true"
    updated_at: 2012-10-01 01:04:41.000000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnsEIqTxQACAUe7
    created_at: 2012-09-19 16:00:16.000000000 Z
    default_code: ''
    entry: ! "假如你想要更多的选择情况，该怎么做呢？这时可以用`elsif`！
      `elsif`语句可以向`if`/`else`语句增加无限个选择，像这样：\n\n    if x < y  # 假设x和y均已定义\n      puts
      \"x小于y！\"\n    elsif x > y\n      puts \"x大于y！\"\n
      \   else\n      puts \"x等于y！\"\n    end\n"
    expect_error: false
    feedback_stats:
      correctness_test_issue: 2
      total: 16
      instructional_text_issue: 10
      positive_feedback: 2
      other: 1
      typo: 1
    from_console: false
    hint: ''
    instruction: 在编辑器中向你的`if`/`else`语句添加一个`elsif`代码块。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: true
    name: Elsif
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if code.scan(\"elsif\").length == 0\n  return \"貌似你没有写elsif语句。
      \"\nend\n\nif exception.kind_of? SyntaxError\n
      \ return \"貌似你的'elsif'代码块不大正确。如需帮助可查看左边的例程！\"\nend\n\nreturn true"
    updated_at: 2012-11-02 12:33:22.806000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnsEQYJ4QACAUz+
    created_at: 2012-09-19 16:00:17.000000000 Z
    default_code: ! "hungry = false\n\n___ ___\n  puts \"I'm writing Ruby programs!\"\n___\n
      \ puts \"Time to eat!\"\n___"
    entry: ! "Sometimes you want to use control flow to check if something is *false*,
      rather than if it's true. You could reverse your `if`/`else`, but Ruby will
      do you one better: it will let you use an `unless` statement.\n\nLet's say you
      don't want to eat *unless* you're hungry. That is, while you're not hungry,
      you write programs, but if you *are* hungry, you eat. You might write that program
      in Ruby like this:\n\n    unless hungry\n      # Write some sweet programs\n
      \   else\n      # Have some noms\n    end"
    expect_error: false
    feedback_stats:
      other: 3
      total: 11
      instructional_text_issue: 5
      positive_feedback: 1
      correctness_test_issue: 2
    from_console: false
    hint: ''
    instruction: We've started you off in the editor. Replace the `___`s with the
      correct `unless` statement code so your program prints out `"I'm writing Ruby
      programs!"`
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: Unless
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if exception.kind_of? SyntaxError\n  return \"Make sure to
      replace the __s with the correct part of the unless statement!\"\nend\n\nif
      code.scan(\"unless\").length == 0\n  return \"It looks like you didn't include
      an unless statement.\"\nend\n\nif code.scan(\"end\").length == 0\n  return \"Don't
      forget to end your unless statement with an 'end'!\"\nend\n\nreturn true"
    updated_at: 2012-11-24 16:36:25.552000000 Z
    view: console_and_editor
  feedback_total: 46
  index: 0
  language_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TyFOXyFuzxlcRMGV
  name: Introduction to Control Flow
  num_forum_answers: 24
  num_forum_questions: 16
  published: true
  read_feedback_total: 4
  updated_at: 2012-11-24 16:36:25.600000000 Z
  user_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TwTxhHBXEgADAGwS
  viewable: false
- !ruby/hash:Moped::BSON::Document
  created_at: 2012-09-19 15:56:59.000000000 Z
  default_view: console_and_editor
  entry: You've probably noticed that Ruby can compare numeric values using familiar
    signs like < and >. These are called comparators or relational operators, and
    Ruby has more than just these two!
  exercises:
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnrTgLvRgACATx/
    created_at: 2012-09-19 15:57:02.000000000 Z
    default_code: ! 'is_true = 2 __ 3


      is_false = 2 __ 3'
    entry: ! "In Ruby, we assign values to variables using `=`, the **assignment operator**.
      But if we've already used `=` for assignment, how do we check to see if two
      things are equal? Well, we use `==`, which is a **comparator** (also called
      a **relational operator**). `==` means \"is equal to.\" When you type\n\n    x
      = 2\n    y = 2\n    if x == y\n      print \"x and y are equal!\"\n    end\n\nyou're
      saying: \"if x equals y, print 'x and y are equal!'\" You can also check to
      see if two values are *not* equal using the `!=` comparator."
    expect_error: false
    feedback_stats:
      instructional_text_issue: 1
      total: 7
      positive_feedback: 3
      correctness_test_issue: 1
      other: 2
    from_console: false
    hint: ''
    instruction: ! 'We''ve got two variables in the editor: `is_true` and `is_false`.
      Replace the `__` with `==` or `!=` to make `is_true` evaluate to `true` and
      `is_false` evaluate to `false`.'
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: Equal or Not?
    tabs: []
    test_functions: ! "if code.scan(\"!=\").length == 0\n  return \"It looks like
      you didn't use != in your code.\"\nend\n\nif code.scan(\"==\").length == 0\n
      \ return \"It looks like you didn't use == in your code.\"\nend\n\nunless is_true\n
      \ return \"It looks like is_true is false. It should be true!\"\nend\n\nif is_false\n
      \ return \"It looks like is_false is true! It should be false.\"\nend\n\nreturn
      true"
    updated_at: 2012-11-02 12:25:27.310000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnujUeBkwACAXBJ
    created_at: 2012-09-19 16:10:53.000000000 Z
    default_code: ! 'test_1 = 17 __ 16


      test_2 = 21 __ 30


      test_3 = 9 __ 9


      test_4 = -11 __ 4'
    entry: ! 'We can also check to see if one value is less than, less than or equal
      to, greater than, or greater than or equal to another. Those operators look
      like this:


      * Less than: `<`

      * Less than or equal to: `<=`

      * Greater than: `>`

      * Greater than or equal to: `>=`

'
    expect_error: false
    feedback_stats:
      typo: 2
      total: 10
      instructional_text_issue: 1
      other: 3
      correctness_test_issue: 2
      positive_feedback: 2
    from_console: false
    hint: ''
    instruction: ! 'We''ve set up a few variables in the editor. We want them all
      to evaluate to `true`. Your job: replace the `__`s with `<`, `<=`, `>`, or `>=`
      to make the expression for each variable true!'
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: Less Than or Greater Than
    tabs: []
    test_functions: ! "if exception.kind_of? SyntaxError\n  return \"Make sure to
      replace each __ with a comparator.\"\nend\n\nif !test_1\n  return \"It looks
      like test_1 is false. Make it true!\"\nend\n\nif !test_2\n  return \"It looks
      like test_2 is false. Make it true!\"\nend\n\nif !test_3\n  return \"It looks
      like test_3 is false. Make it true!\"\nend\n\nif !test_4\n  return \"It looks
      like test_4 is false. Make it true!\"\nend\n\nif code.scan(\"<\").length ==
      0 || code.scan(\">\").length == 0\n  return \"Make sure to use comparators for
      each expression.\"\nend\n\nif code.scan(\"==\").length > 0 || code.scan(\"!=\").length
      > 0\n  return \"Let's not use != or == for this exercise—just <, >, <=, and
      >= for now.\"\nend\n\nreturn true"
    updated_at: 2012-10-11 06:41:42.371000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnukp9eKgACAVIk
    created_at: 2012-09-19 16:10:58.000000000 Z
    default_code: ! "# test_1 = 77 != 77\ntest_1 = \n\n# test_2 = -4 <= -4\ntest_2
      = \n\n# test_3 = -44 < -33\ntest_3 = \n\n# test_4 = 100 == 1000\ntest_4 = "
    entry: ! 'Great work so far! You know what they say: practice makes perfect. Let''s
      try a few more comparators to make sure you''ve got the hang of this.'
    expect_error: false
    feedback_stats:
      other: 5
      total: 13
      correctness_test_issue: 4
      instructional_text_issue: 2
      positive_feedback: 2
    from_console: false
    hint: ''
    instruction: ! 'For this round, we''ll show you the comparators and you set each
      variable to `true` or `false` depending on what value you expect the expression
      to return. Remember: no quotes around `true` and `false`!'
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: Practice Makes Perfect
    tabs: []
    test_functions: ! "if exception.kind_of? SyntaxError\n  return \"Make sure to
      type true or false after each =!\"\nend\n\nunless code.include? \"true\"\n  return
      \"It looks like the boolean 'true' doesn't apear in your code.\"\nend\n\nunless
      code.include? \"false\"\n  return \"It looks like the boolean 'false' doesn't
      appear in your code.\"\nend\n\nif test_1\n  return \"It looks like your value
      for test_1 isn't correct.\"\nend\n\nif !test_2\n  return \"It looks like your
      value for test_2 isn't correct.\"\nend\n\nif !test_3\n  return \"It looks like
      your value for test_3 isn't correct.\"\nend\n\nif test_4\n  return \"It looks
      like your value for test_4 isn't correct.\"\nend\n\nreturn true"
    updated_at: 2012-11-02 12:25:52.399000000 Z
    view: console_and_editor
  feedback_total: 30
  index: 1
  language_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TyFOXyFuzxlcRMGV
  name: Making Comparisons
  num_forum_answers: 9
  num_forum_questions: 7
  published: true
  read_feedback_total: 5
  updated_at: 2012-11-02 12:25:52.421000000 Z
  user_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TwTxhHBXEgADAGwS
  viewable: false
- !ruby/hash:Moped::BSON::Document
  created_at: 2012-09-19 15:57:06.000000000 Z
  default_view: console_and_editor
  entry: Comparing values is important in Ruby, but what if we want to check more
    than one condition at once? For instance, what if we want to check if x AND y
    are true, or x OR y? For that, we'll need boolean operators.
  exercises:
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnrU1CxegACAUBT
    created_at: 2012-09-19 15:57:07.000000000 Z
    default_code: ! "# boolean_1 = 77 < 78 && 77 < 77\nboolean_1 = \n\n# boolean_2
      = true && 100 >= 100\nboolean_2 = \n\n# boolean_3 = 2**3 == 8 && 3**2 == 9\nboolean_3
      = "
    entry: ! "Comparators aren't the only operators available to you in Ruby. You
      can also use **logical** or **boolean operators**. Ruby has three: and (`&&`),
      or (`||`), and not (`!`). Boolean operators result in boolean values: `true`
      or `false`.\n\nThe boolean operator **and**, `&&`, only results in `true` when
      **both** expression on either side of `&&` are `true`. Here's how `&&` works:\n\n
      \   true && true # => true\n    true && false # => false\n    false && true
      # => false\n    false && false # => false\n\nFor example, `1 < 2 && 2 < 3` is
      `true` because it's true that one is less than two **and** that two is less
      than three."
    expect_error: false
    feedback_stats:
      positive_feedback: 4
      total: 9
      instructional_text_issue: 1
      typo: 1
      other: 2
      correctness_test_issue: 1
    from_console: false
    hint: ''
    instruction: Let's practice a bit with `&&`. Check out the boolean expressions
      and set each variable to `true` or `false` depending on what value you expect
      the expression to return.
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: And
    tabs: []
    test_functions: ! "if exception.kind_of? SyntaxError\n  return \"Make sure to
      type true or false after each =!\"\nend\n\nif boolean_1\n  return \"It looks
      like your value for boolean_1 isn't correct.\"\nend\n\nif !boolean_2\n  return
      \"It looks like your value for boolean_2 isn't correct.\"\nend\n\nif !boolean_3\n
      \ return \"It looks like your value for boolean_3 isn't correct.\"\nend\n\nreturn
      true"
    updated_at: 2012-11-02 12:24:55.145000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnyQ59eKgACAYoL
    created_at: 2012-09-19 16:26:43.000000000 Z
    default_code: ! "# boolean_1 = 2**3 != 3**2 || true\nboolean_1 = \n\n# boolean_2
      = false || -10 > -9\nboolean_2 = \n\n# boolean_3 = false || false\nboolean_3
      = "
    entry: ! "Ruby also has the **or** operator (`||`). Ruby's `||` is called an **inclusive
      or** because it evaluates to `true` when one or the other *or both* expressions
      are true. Check it out:\n\n    true || true # => true\n    true || false # =>
      true\n    false || true # => true\n    false || false # => false\n"
    expect_error: false
    feedback_stats:
      other: 1
      total: 4
      positive_feedback: 3
    from_console: false
    hint: ''
    instruction: Set each variable to `true` or `false` depending on what value you
      expect the expression to return.
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: Or
    tabs: []
    test_functions: ! "if exception.kind_of? SyntaxError\n  return \"Make sure to
      type true or false after each =!\"\nend\n\nif !boolean_1\n  return \"It looks
      like your value for boolean_1 isn't correct.\"\nend\n\nif boolean_2\n  return
      \"It looks like your value for boolean_2 isn't correct.\"\nend\n\nif boolean_3\n
      \ return \"It looks like your value for boolean_3 isn't correct.\"\nend\n\nreturn
      true"
    updated_at: 2012-11-02 12:27:40.905000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnyRFCxegACAani
    created_at: 2012-09-19 16:26:44.000000000 Z
    default_code: ! "# boolean_1 = !true\nboolean_1 = \n\n# boolean_2 = !true && !true\nboolean_2
      = \n\n# boolean_3 = !(700 / 10 == 70)\nboolean_3 = "
    entry: ! "Finally, Ruby has the boolean operator **not** (`!`). `!` makes `true`
      values `false`, and vice-versa.\n\n    !true # => false\n    !false # => true\n"
    expect_error: false
    feedback_stats:
      positive_feedback: 2
      total: 2
    from_console: false
    hint: ''
    instruction: Set each variable to `true` or `false` depending on what value you
      expect the expression to return.
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: Not
    tabs: []
    test_functions: ! "if exception.kind_of? SyntaxError\n  return \"Make sure to
      type true or false after each =!\"\nend\n\nif boolean_1\n  return \"It looks
      like your value for boolean_1 isn't correct.\"\nend\n\nif boolean_2\n  return
      \"It looks like your value for boolean_2 isn't correct.\"\nend\n\nif boolean_3\n
      \ return \"It looks like your value for boolean_3 isn't correct.\"\nend\n\nreturn
      true"
    updated_at: 2012-11-02 12:29:44.192000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnyS0eBkwACAaik
    created_at: 2012-09-19 16:26:51.000000000 Z
    default_code: ! "# boolean_1 = (3 < 4 || false) && (false || true)\nboolean_1
      = \n\n# boolean_2 = !true && (!true || 100 != 5**2)\nboolean_2 = \n\n# boolean_3
      = true || !(true || false)\nboolean_3 = "
    entry: ! "You can combine boolean operators in your expressions. Combinations
      like\n\n    (x && (y || w)) && z\n\nare not only legal expressions, but are
      extremely useful tools for your programs.\n\nThese expression may take some
      getting used to, but you can always use parentheses to control the order of
      evaluation. Expressions in parentheses are always evaluated before anything
      outside parentheses."
    expect_error: false
    feedback_stats:
      correctness_test_issue: 1
      total: 9
      instructional_text_issue: 2
      other: 3
      positive_feedback: 3
    from_console: false
    hint: ''
    instruction: Last one! Set each variable to `true` or `false` depending on what
      value you expect the expression to return.
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: Combining Boolean Operators
    tabs: []
    test_functions: ! "if exception.kind_of? SyntaxError\n  return \"Make sure to
      type true or false after each =!\"\nend\n\nunless boolean_1\n  return \"It looks
      like your value for boolean_1 isn't correct.\"\nend\n\nif boolean_2\n  return
      \"It looks like your value for boolean_2 isn't correct.\"\nend\n\nunless boolean_3\n
      \ return \"It looks like your value for boolean_3 isn't correct.\"\nend\n\nreturn
      true"
    updated_at: 2012-11-02 12:39:05.278000000 Z
    view: console_and_editor
  feedback_total: 24
  index: 2
  language_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TyFOXyFuzxlcRMGV
  name: Boolean Operators
  num_forum_answers: 13
  num_forum_questions: 8
  published: true
  read_feedback_total: 6
  updated_at: 2012-11-02 12:39:05.310000000 Z
  user_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TwTxhHBXEgADAGwS
  viewable: false
- !ruby/hash:Moped::BSON::Document
  created_at: 2012-09-19 15:57:11.000000000 Z
  default_view: console_and_editor
  entry: Let's go over the new Ruby syntax we've learned.
  exercises:
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFnrWZVv1gACATPZ
    created_at: 2012-09-19 15:57:13.000000000 Z
    default_code: ''
    entry: ! 'Great work! So far you''ve learned:


      * How to use `if`, `else`, and `elsif`

      * How to use comparators / relational operators like `==`, `!=`, `<`, `<=`,
      `>`, and `>=`

      * How to use boolean / logical operators like `&&`, `||`, and `!`'
    expect_error: false
    feedback_stats:
      instructional_text_issue: 1
      total: 2
      positive_feedback: 1
    from_console: false
    hint: ''
    instruction: Take a second to reflect on what you've learned so far. When you're
      ready, hit Run to start the review exercises.
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: Nice Work!
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: return true
    updated_at: 2012-10-14 22:48:13.077000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFoCra34sgACAoVx
    created_at: 2012-09-19 17:36:45.000000000 Z
    default_code: ''
    entry: All right! You're all on your lonesome. (Well, not *quite*. Check the Hint
      if you need a syntax refresher.)
    expect_error: false
    feedback_stats:
      instructional_text_issue: 2
      total: 5
      typo: 2
      other: 1
    from_console: false
    hint: ! "The syntax for `if`/`elsif`/`else` looks like this:\n\n    if expression\n
      \     # Do something\n    elsif expression\n      # Do something else\n    else\n
      \     # Do yet another thing\n    end"
    instruction: Create an `if`/`else` statement in the editor. Make sure to include
      at least one `elsif`. Each branch of the statement should print something to
      the console.
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: If, Else, and Elsif
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if code == nil\n  return \"You gotta type something!\"\nend\n\nif
      exception.kind_of? SyntaxError\n  return \"It looks like your syntax isn't quite
      right. Check the Hint if you need help!\"\nend\n\nif code.scan(\"if\").length
      == 0\n  return \"Make sure to include an 'if' statement!\"\nend\n\nif code.scan(\"elsif\").length
      == 0\n  return \"Did you include at least one 'elsif'?\"\nend\n\nif code.scan(\"else\").length
      == 0\n  return \"Don't forget your 'else'!\"\nend\n\nif prints.length == 0\n
      \ return \"It looks like you didn't print anything to the console.\"\nend\n\nreturn
      true"
    updated_at: 2012-10-09 18:40:53.125000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFoCsqnplwACApAN
    created_at: 2012-09-19 17:36:50.000000000 Z
    default_code: ''
    entry: Good! Now let's review the `unless` statement.
    expect_error: false
    feedback_stats:
      instructional_text_issue: 2
      total: 2
    from_console: false
    hint: ! "Remember, `unless` syntax looks like this:\n\n    unless condition\n
      \     # Do something!\n    end\n\nFor `unless`, the `# Do something!` bit will
      execute if the condition evaluates to `false`."
    instruction: Create an `unless` statement in the editor. The statement should
      print something to the console.
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: Unless
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if code == nil\n  return \"You gotta type something!\"\nend\n\nif
      exception.kind_of? SyntaxError\n  return \"It looks like your syntax isn't quite
      right. Check the Hint if you need help!\"\nend\n\nif code.scan(\"unless\").length
      == 0\n  return \"Make sure to include an 'unless' statement!\"\nend\n\nif prints.length
      == 0\n  return \"It looks like you didn't print anything to the console.\"\nend\n\nreturn
      true"
    updated_at: 2012-10-01 01:16:02.000000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFoCs7c8swACAman
    created_at: 2012-09-19 17:36:51.000000000 Z
    default_code: ! "# test_1 should be false\ntest_1 = \n\n# test_2 = should be false\ntest_2
      = \n\n# test_3 = should be true\ntest_3 = "
    entry: Now let's review comparators / relational operators. We've turned the tables
      a bit!
    expect_error: false
    feedback_stats:
      instructional_text_issue: 3
      total: 8
      typo: 4
      correctness_test_issue: 1
    from_console: false
    hint: Remember, comparators are `==`, `!=`, `>`, `>=`, `<`, and `<=`.
    instruction: We're letting you know what value (`true` or `false`) we want each
      variable to have, and your job is to add an expression that evaluates to the
      correct value using comparators.
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: Dare to Compare
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if code == nil\n  return \"You gotta type something!\"\nend\n\nif
      exception.kind_of? SyntaxError\n  return \"Make sure to put an expression after
      each =!\"\nend\n\nif code.scan(\">\").length == 0 && code.scan(\"<\").length
      == 0 && code.scan(\"!=\").length == 0 && code.scan(\"==\").length == 0\n  return
      \"Make sure to use comparators in your expressions.\"\nend\n\nif test_1\n  return
      \"It looks like your value for test_1 isn't correct.\"\nend\n\nif test_2\n  return
      \"It looks like your value for test_2 isn't correct.\"\nend\n\nif !test_3\n
      \ return \"It looks like your value for test_3 isn't correct.\"\nend\n\nreturn
      true"
    updated_at: 2012-11-10 23:44:54.095000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFoC1gYJ4QACApdQ
    created_at: 2012-09-19 17:37:26.000000000 Z
    default_code: ! "# test_1 should be true\ntest_1 = \n\n# test_2 = should be true\ntest_2
      = \n\n# test_3 = should be false\ntest_3 = "
    entry: Home stretch! Let's go over boolean operators.
    expect_error: false
    feedback_stats:
      correctness_test_issue: 1
      total: 6
      typo: 2
      instructional_text_issue: 1
      other: 1
      positive_feedback: 1
    from_console: false
    hint: ''
    instruction: The code in the editor indicates what value (`true` or `false`) we
      want each variable to have, and your job is to add an expression that evaluates
      to the correct value using boolean operators (`&&`, `||`, or `!`).
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: Billions of Booleans
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if code == nil\n  return \"You gotta type something!\"\nend\n\nif
      exception.kind_of? SyntaxError\n  return \"Make sure to put an expression after
      each =!\"\nend\n\nif code.scan(\"&&\").length == 0 && code.scan(\"||\").length
      == 0 && code.scan(\"!\").length == 0\n  return \"Make sure to use boolean operators
      in your expressions.\"\nend\n\nunless test_1\n  return \"It looks like your
      value for test_1 isn't correct.\"\nend\n\nunless test_2\n  return \"It looks
      like your value for test_2 isn't correct.\"\nend\n\nif test_3\n  return \"It
      looks like your value for test_3 isn't correct.\"\nend\n\nreturn true"
    updated_at: 2012-11-10 23:42:35.097000000 Z
    view: console_and_editor
  feedback_total: 23
  index: 3
  language_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TyFOXyFuzxlcRMGV
  name: Review
  num_forum_answers: 16
  num_forum_questions: 11
  published: true
  read_feedback_total: 5
  updated_at: 2012-11-10 23:44:54.141000000 Z
  user_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TwTxhHBXEgADAGwS
  viewable: false
