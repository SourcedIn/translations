--- !ruby/hash:Moped::BSON::Document
avg_user_rating: 4.454330175913396
classification: :lesson
created_at: 2012-09-24 23:26:17.000000000 Z
domain: :freestyle
down_votes: 94
entry: 在这一课中，我们将介绍如何定义Ruby的方法，以及如何使用块来开发出功能强大的排序算法。
feedback_total: 47
is_project: false
language_id: !ruby/object:Moped::BSON::ObjectId
  raw_data: !binary |-
    TyFOXyFuzxlcRMGV
level: :beginner
locale: zh
name: 方法、块和排序
num_exercises: 19
num_published_exercises: 19
num_published_sections: 5
num_readiness_feedbacks: 3
num_sections: 5
num_user_ratings: 1478
published: true
published_at: 2012-09-28 19:11:34.000000000 Z
rating: 361.6754350868411
read_feedback_total: 5
readiness: 89.67857142857143
recommended: false
review_status: :approved
roles:
  manager: []
  editor: []
submitted_at: 2012-09-28 18:53:12.000000000 Z
total_user_rating: 6583.5
up_votes: 484
updated_at: 2012-11-26 15:44:42.686000000 Z
user_id: !ruby/object:Moped::BSON::ObjectId
  raw_data: !binary |-
    TwTxhHBXEgADAGwS
sections:
- !ruby/hash:Moped::BSON::Document
  created_at: 2012-09-24 23:26:17.000000000 Z
  default_view: console_and_editor
  entry: 方法是程序中为了执行特定任务而编写的一段可重复使用的代码。
    我们已为你展示了很多Ruby的内建方法；现在，你将要编写你自己的方法了！
  exercises:
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UGD2a7z3ZwACAB4A
    created_at: 2012-09-25 00:10:19.000000000 Z
    default_code: ! "def prime(n)\n  puts \"那不是整数。\" unless n.is_a?
      Integer\n  is_prime = true\n  for i in 2..n-1\n    if n % i == 0\n      is_prime
      = false\n    end\n  end\n  if is_prime\n    puts \"#{n}是质数！\"\n  else\n
      \   puts \"#{n}不是质数。\"\n  end\nend\n\nprime(2)\nprime(9)\nprime(11)\nprime(51)\nprime(97)"
    entry: ! ' **方法** 是程序中为了执行特定任务而编写的一段可重复使用的代码。
      你可能会奇怪，为什么要把代码分解为许多方法，而不是把代码全部堆在一起？
      理由如下：


      1. 如果程序出了问题，条理清晰的代码更容易发现错误并改正。
      为特定任务编写单独的方法，使代码变得更有条理。


      2. 通过为特定任务编写单独的方法（计算机科学家们称之为 **关注点分离** 的一种思维方式），
      使得程序代码更简洁，可重用性更高——不仅在单个程序内可以重复调用同一个方法，
      甚至还可以在 **另一个** 程序中调用它。


      3. 当我们学到更多关于 **对象** 的内容时，你会发现使用Ruby的方法可以做许多有趣的事情。'
    expect_error: false
    feedback_stats: {}
    from_console: false
    hint: ''
    instruction: 看一看我们在编辑器里编写的方法。你能猜出它的作用吗？在你想好之后请单击Run！
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 为什么要用方法？
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: return true
    updated_at: 2012-09-28 18:46:51.000000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UGD2bMm9uQACABx/
    created_at: 2012-09-25 00:10:20.000000000 Z
    default_code: ! "___ puts_1_to_10\n  (1..10).each { |i| puts i }\n___\n\nputs_1_to_10
      # 不用管这一句。我们很快会在后面解释！"
    entry: ! "我们使用`def`（\"`def`ine\"的缩写）关键字来定义方法。方法包含三个部分：\n
      \n1. **首部** ，包含`def`关键字、方法名称和方法的 **实际参数** （我们在下一节将讲到实际参数）。
      \n2. **主体** ，描述方法执行内容的代码块。按照惯例，主体缩进两个空格（与`for`、`if`、`elsif`和`else`等语句一样）。
      \n3. 方法以`end`关键字结束。\n\n
      下面是一个简单函数`welcome`的语法示例，功能是向控制台打印\"欢迎来到Ruby的世界！\"：\n\n
      def welcome\n
        puts \"欢迎来到Ruby的世界！\"\n
      end"
    expect_error: false
    feedback_stats:
      instructional_text_issue: 1
      total: 1
    from_console: false
    hint: ''
    instruction: 在右边的编辑器中我们开始编写了一个方法，但是它不完整。将`___`替换成正确的关键字使方法得以运行！
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 方法的语法
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if exception.kind_of? NameError\n  return \"你的语法貌似不大正确。
      确保将___替换成正确的关键字！\"\nend\n\nif
      exception.kind_of? SyntaxError\n  return \"你的语法貌似不大正确。确保将___替换成正确的关键字！\"\nend\n\nfor
      num in (1..10).to_a\n  unless prints.include? num.to_s\n    return \"不要修改函数的主体！
      它应当使用'puts'打印出从1到10的数。\"\n  end\nend\n\nreturn true"
    updated_at: 2012-10-16 09:56:32.354000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UGD2bqV/6AACACSY
    created_at: 2012-09-25 00:10:22.000000000 Z
    default_code: ! "# 在下面定义你的方法！\n\n\n\n\n\n# 在该行以上定义你的方法。\n\n
      greeting # 不用管这一句。我们将在下一个练习解释！"
    entry: ! "现在，是时候打造你自己的方法了。记住，语法是这样的：\n\n
      def method_name\n
        # Do something!\n
      end"
    expect_error: false
    feedback_stats:
      other: 1
      total: 2
      positive_feedback: 1
    from_console: false
    hint: ''
    instruction: 在编辑器中创建一个`greeting`方法。它应当使用`puts`向控制台打印一个问候。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 创建你自己的
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "begin\n  greeting\nrescue NameError\n  return \"你创建了一个名叫greeting的方法吗？\"
      \nend\n\nif prints.length == 0\n  return \"貌似你没有向控制台打印任何东西。\"\nend\n\nreturn true"
    updated_at: 2012-10-06 22:11:01.000000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UGD3HX4ozgACACNX
    created_at: 2012-09-25 00:13:17.000000000 Z
    default_code: ! "def array_of_10\n  puts (1..10).to_a\nend\n\n"
    entry: ! '定义一个方法是很好的，但是只有你去 **调用** 它，它才能发挥作用。
      比如，如果你调用一个名叫`cartoon_fox`的方法，Ruby就会寻找使用这个名字的方法，然后尝试执行它里面的代码。
      （如果Ruby没找到名叫`cartoon_fox`的方法，它会返回`NameError`。在另一个课程中我们会讲到错误处理。）


      调用一个方法，你只需要打出它的名字。还记得前两个练习中我们在方法定义后面打出的`puts_1_to_10`或者`greeting`吗？
      那就是我们在调用这些方法！'
    expect_error: false
    feedback_stats:
      instructional_text_issue: 3
      total: 3
    from_console: false
    hint: ''
    instruction: 我们在右边的编辑器里编写了一个函数`array_of_10`。在第5行调用它！
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 调用它！
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if exception.kind_of? SyntaxError\n  return \"你的语法貌似不大正确。
      你所需要做的就是在第5行打出方法的名字，这样就调用了方法。\"\nend\n\nfor num in (1..10).to_a\n  unless
      prints.include? num.to_s\n    return \"确保在第5行调用array_of_10。\"\n  end\nend\n\nreturn true"
    updated_at: 2012-11-26 01:27:57.323000000 Z
    view: console_and_editor
  feedback_total: 6
  index: 0
  language_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TyFOXyFuzxlcRMGV
  name: 方法也疯狂
  num_forum_answers: 6
  num_forum_questions: 3
  published: true
  read_feedback_total: 0
  updated_at: 2012-11-26 01:27:57.376000000 Z
  user_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TwTxhHBXEgADAGwS
  viewable: false
- !ruby/hash:Moped::BSON::Document
  created_at: 2012-09-25 00:13:33.000000000 Z
  default_view: console_and_editor
  entry: 让我们来学习如何为方法指定输入和输出。
  exercises:
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UGD3Lj3Y+QACACkz
    created_at: 2012-09-25 00:13:34.000000000 Z
    default_code: ! "def cubertino(n)\n  puts n ** 3\nend\n\n"
    entry: ! "如果一个方法带有 **实际参数** ，我们说它 **接受** 或者 **要求** 这些实际参数。
      我们可能会定义一个函数`square`，像这样：\n\n
      def square(n)\n
      \     puts n ** 2\n
      end\n\n
      然后这样调用它：\n\n
      square(12)\n    # ==> 打印\"144\"\n\n
      **实际参数** 是在你 **调用** 方法时放在方法名后面括弧里面的代码段，
      而 **形式参数** 则是在你 **定义** 方法时放在方法名后面括弧里面的一个名称。
      举个例子，当定义上面的`square`方法时，我们给了它一个形式参数`n`（表示\"number\"）；
      在调用它时，我们则将实际参数`12`传给了它。\n\n
      你可以把形式参数看作是实际参数的昵称，因为它事先并不知道它到底会得到什么样的实际参数。\n\n
      Ruby的括弧通常是可选的，不过为了提高可读性，最好将形式参数和实际参数用括弧括起来。"
    expect_error: false
    feedback_stats: {}
    from_console: false
    hint: ''
    instruction: 在编辑器中调用`cubertino`方法，向它传入实际参数`8`。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 形式参数与实际参数
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "if code.scan(\"cubertino\").length < 2\n  return \"确保调用
      cubertino并传入数字8作为实际参数。\"\nend\n\nunless
      prints.include? \"512\"\n  return \"貌似你没有向控制台打印8 ** 3的值。\"\nend\n\nreturn true"
    updated_at: 2012-09-27 22:23:39.000000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UGD3OxCV7AACACa8
    created_at: 2012-09-25 00:13:47.000000000 Z
    default_code: ! "def what_up(greeting, *bros)\n  bros.each { |bro| puts \"#{greeting}，
      #{bro}？\" }\nend\n \nwhat_up(\"别来无恙啊\", \"张三\", \"李四\", \"王五\")"
    entry: ! "俗话说世事难料：你的方法不仅无法事先知道会获得什么样的实际参数，
      甚至有时候连实际参数 **有多少个** 也不知道。\n\n
      比方说你有一个`friend`方法，使用`puts`将用户传入的实际参数输出。
      它可能是这样的：\n\n
      def friend(name):\n
        puts \"我的朋友是\" + name + \"。\"\n
      end\n\n
      如果只有一个朋友的话，这个方法是很好的。但是假如你想打印出 **多个** 朋友，
      而且事先还不知道用户会输入多少个朋友的名字，那该怎么办呢？\n\n
      解决办法是： **可变参数** 。可变参数就是实际参数前面加一个`*`，告诉Ruby说：
      “Ruby你好，我不知道到时候会有 **多少个** 实际参数，不过很可能不止一个。”"
    expect_error: false
    feedback_stats:
      instructional_text_issue: 3
      total: 7
      positive_feedback: 1
      typo: 2
      correctness_test_issue: 1
    from_console: false
    hint: ''
    instruction: 单击Run来看看编辑器中的示例代码会输出什么结果。你可以自己试一试：随意使用不同的`bros`参数来调用`what_up`！
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 可变参数！
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: return true
    updated_at: 2012-10-21 14:41:26.299000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UGEG6KV/6AACANEX
    created_at: 2012-09-25 01:20:40.000000000 Z
    default_code: ''
    entry: ! "有时候我们不只是想要一个方法向控制台打印一些东西，
      我们实际上想要某个方法返回给我们（或者返回给另一个方法！）一个值。
      这个时候，我们就用到了`return`。\n\n`return`关键字用来处理方法的 **输出** 。
      如果我们写一个这样的方法`cube`：\n\n
      def cube(n)\n
        return n ** 3\n
      end\n\n
      这个方法不会打印任何东西，但是它会返回计算结果。调用`cube(4)`会得到数值`64`。\n\n
      我们可以像使用其它值那样来使用方法返回的值：我们可以将它们赋给变量，用它们进行计算等等。
      使用上面的`cube`方法，我们可以向Ruby输入：\n\n
      output = cube(3)\n
      output += 11\n
      \   puts output\n\n
      然后它会输出`38`，那是`3 ** 3 + 11`的结果。"
    expect_error: false
    feedback_stats:
      instructional_text_issue: 1
      total: 1
    from_console: false
    hint: ! "记住，你应该这样定义一个方法：\n\n
      def method_name(形式参数)\n
        # 要做的事！\n
        # 可能要返回一个值\n
      end"
    instruction: 编写一个方法`add`，接受两个数字作为输入，然后返回它们的和。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 让我们来学习返回
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "begin\n  add(1,1)\nrescue NameError\n  return \"你定义了一个名叫add的方法吗？\"\n
      rescue ArgumentError\n  return \"确保你的add方法接受两个实际参数。\"\nend\n\nif exception.kind_of? SyntaxError\n
      \ return \"你的语法貌似不大正确。如需帮助可查看提示。\"\nend\n\noxnard = (1..100).to_a\nmontalvo = (101..200).to_a\n\nfor
      a in oxnard\n  for b in montalvo\n    if add(a,b) != a + b\n      return \"似乎你的add方法并不是返回两个数字的和。\"\n
      \   end\n  end\nend\n\nreturn true"
    updated_at: 2012-10-03 20:26:14.000000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UGD3PetxiwACACx/
    created_at: 2012-09-25 00:13:49.000000000 Z
    default_code: ''
    entry: 不闻不若闻之，闻之不若见之，见之不若知之，知之不若行之。（快速朗读 *这句话* 三遍。）
    expect_error: false
    feedback_stats:
      correctness_test_issue: 5
      total: 9
      positive_feedback: 2
      other: 1
      instructional_text_issue: 1
    from_console: false
    hint: ! "方法的语法是这样的：\n\n
    def method_name(形式参数)\n
      \     # Do something!\n
    end"
    instruction: ! '在编辑器中定义两个方法：


      1. `greeter`方法，接受一个代表人名的字符串作为形式参数`name`，然后返回向这个人问候的字符串。
      （确保使用`return`，而不要使用`print`或者`puts`。）

      2. `by_three?`方法，接受一个整数形式参数`number`，如果该整数能被3整除，则返回`true`，否则返回`false`。
      记住，如果方法的返回类型是布尔型，那么方法名应以问号结束，这是Ruby最佳实践。'
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 熟能生巧
    solution_code: ''
    solution_entry: ''
    tabs: []
    test_functions: ! "begin\n  greeter(\"Eric\")\nrescue NameError\n  return
      \"你定义了greeter方法吗？\"\nend\n\nbegin\n  by_three?(12)\nrescue NameError\n
      \ return \"你定义了by_three?方法吗？\"\nend\n\neric = greeter(\"Eric\")\nunless
      eric.include? \"Eric\"\n  return \"貌似你的greeter方法并没有输出正确的人名。\"\nend\n\nif code.scan(\"print\").length
      > 0 || code.scan(\"puts\").length > 0\n  return \"貌似你的greeter方法将输出打印到了控制台，
      而不是使用return将其返回。\"\nend\n\noxnard = Array.new(20)
      { |i| i * 3 }\nmontalvo = Array.new(20) { |i| i * 3 + 1 }\n\nfor num in oxnard\n
      \ unless by_three?(num)\n    return \"貌似你的by_three?方法并不是对于所有能被3整除的数都返回true。\"\n  end\nend\n\nfor
      num in montalvo\n  if by_three?(num)\n    return \"貌似你的by_three?方法并不是对于所有不能被3整除的数都返回false。\"\n
      \ end\nend\n\nreturn true"
    updated_at: 2012-11-14 08:21:43.919000000 Z
    view: console_and_editor
  feedback_total: 17
  index: 1
  language_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TyFOXyFuzxlcRMGV
  name: 复杂一点的方法
  num_forum_answers: 21
  num_forum_questions: 10
  published: true
  read_feedback_total: 0
  updated_at: 2012-11-14 08:21:43.942000000 Z
  user_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TwTxhHBXEgADAGwS
  viewable: false
- !ruby/hash:Moped::BSON::Document
  created_at: 2012-09-25 00:14:39.000000000 Z
  default_view: console_and_editor
  entry: 我们在第3课“循环和迭代器”中学到了一些关于块的内容。现在我们要深入了解了。
  exercises:
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UGD3byd/ewACADCk
    created_at: 2012-09-25 00:14:39.000000000 Z
    default_code: ! "1.times do\n  puts \"我是一个代码块！\"\nend\n\n1.times { puts
      \"我也是！\" }"
    entry: ! '你碰到过的大多数方法都有一个定义好的名字，不管是你定义的还是其他人定义的
      （ *例如* [array].sort()、"string".downcase()等等）。
      你可以把块看作是没有名字的方法。（这类似于JavaScript的匿名函数和Python的lambda函数。）


      块可以使用关键字`do`和`end`来定义，也可以使用大括号（`{}`）来定义。'
    expect_error: false
    feedback_stats:
      instructional_text_issue: 2
      total: 3
      other: 1
    from_console: false
    hint: ''
    instruction: 阅读编辑器中的示例代码。很熟悉是吗？单击Run并观察这些块的执行结果。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 块就像没有名字的方法
    tabs: []
    test_functions: return true
    updated_at: 2012-10-14 09:30:41.100000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UGD3t+txiwACAC/X
    created_at: 2012-09-25 00:15:51.000000000 Z
    default_code: ! "# 该方法将单词首字母变为大写\ndef capitalize(string) \n  puts
      \"#{string[0].upcase}#{string[1..-1]}\"\nend\n\ncapitalize(\"ryan\") # 打印
      \"Ryan\"\ncapitalize(\"jane\") # 打印 \"Jane\"\n\n# 将数组中每个字符串首字母变为大写的块\n
      [\"ryan\", \"jane\"].each {|string| puts \"#{string[0].upcase}#{string[1..-1]}\"}
      # 先打印 \"Ryan\"，然后打印 \"Jane\""
    entry: ! '不过，块和方法还是有区别的。


      阅读编辑器中的代码。`capitalize`方法将一个单词的首字母变为大写（查看提示以了解其原理），
      而且我们可以通过方法名不断地调用`capitalize`方法。我们可以尽情地调用`capitalize("matz")`、
      `capitalize("eduardo")`或者将其它任何字符串的首字母变成大写。


      相比之下，我们定义的块（`.each`后面）则只能调用 *一次* ，而且只运行在数组迭代上下文环境中。
      它看起来要在`each`里面执行相当长的操作。'
    expect_error: false
    feedback_stats:
      instructional_text_issue: 1
      total: 1
    from_console: false
    hint: ! '字符串后面加方括号实际上是将字符串当作字符数组来处理。
      关于这一点的详细说明见[Ruby文档](http://www.ruby-doc.org/core-1.9.3/String.html#method-i-5B-5D)。


      `string[0]`代表字符串的第一个字符；`string[1..-1]`代表由第2个字符到最后一个字符组成的新的字符串。
      因此，该方法先打印出字符串首字符的大写，然后原样打印其后剩余的字符。'
    instruction: 我讲得够清楚吗？单击Run来看看方法和块的表现吧。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 块与方法的区别
    tabs: []
    test_functions: return true
    updated_at: 2012-10-01 02:55:35.000000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UGNpjwEyRwACAOFc
    created_at: 2012-09-26 20:46:07.000000000 Z
    default_code: ! "# {|i| puts i}块在每次执行的时候获得当前数组项，\n
      # 然后将该数组项打印出来。\n
      [1, 2, 3, 4, 5].each { |i| puts i }\n\n
      # 这个块为每个数组项打印数字5。\n
      # （它忽略了数组项本身，这是允许的。）\n
      [1, 2, 3, 4, 5].each { |i| puts 5 }"
    entry: ! '块可以作为方法的参数。事实上最近的这些例子里面`.each`方法正是这样的：
      接受块作为参数，然后使用它来做各种事情！
      你之所以没有注意到，是因为我们调用`.each`方法的时候没有用括弧将参数括起来，而括弧是可选的。
      我们这样做似乎有点不厚道。


      把块作为方法的参数是一种非常好的做法，因为这样我们可以将方法中的某些任务 **抽象** 出来，
      然后在调用方法的时候再定义这些任务。抽象是计算机科学的一个重要思想，
      你可以认为它的含义就是“使一些事情变得简单”。举个例子，看房子的人一般会看户型满意不满意、
      价格能不能接受、开发商的口碑怎么样、合同的收房时间和违约细则以及贷款多长时间能贷下来等等。
      结果有一天，你对你的朋友说：“喂，我要去看户型、价格、开发商的口碑、合同和贷款。”那你的朋友肯定听迷糊了！
      我们说，“看房”这个行为本身就包括上述内容，为了简化，你只需要说：“我要去看房”，就可以了。
      同样的道理，将一个方法要执行的任务抽象出来用块表示（就像`.each`方法），也起到了简化的作用。'
    expect_error: false
    feedback_stats: {}
    from_console: false
    hint: ! "原始代码打印\n\n    5 5 5 5 5\n\n
      每行有一个`5`，
      我们想要它打印\n\n    5 10 15 20 25\n\n
      每行有一个数字。"
    instruction: 目前，第二个`.each`方法会打印出五次数字`5`（因为它会为每个数组项打印`5`，
      而一共有五个数组项）。修改块内的代码，使得它打印每个数组项 *乘以* 5的值。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 使用代码块
    tabs: []
    test_functions: ! "if exception.kind_of? SyntaxError\n  return \"你的语法貌似不大正确。
      如需帮助可查看提示。\"\nend\n\nfor num in [5,
      10, 15, 20, 25]\n  unless prints.include? num.to_s\n    return \"貌似你的代码块并不打印每个数组项乘以5的值。\"\n  end\nend\n\nreturn
      true"
    updated_at: 2012-09-28 18:48:26.000000000 Z
    view: console_and_editor
  feedback_total: 4
  index: 2
  language_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TyFOXyFuzxlcRMGV
  name: 再说说块这个东西
  num_forum_answers: 1
  num_forum_questions: 1
  published: true
  read_feedback_total: 0
  updated_at: 2012-10-14 09:30:41.123000000 Z
  user_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TwTxhHBXEgADAGwS
  viewable: false
- !ruby/hash:Moped::BSON::Document
  created_at: 2012-09-25 00:16:06.000000000 Z
  default_view: console_and_editor
  entry: 既然我们对块有了进一步的了解，我们可以快速而简便地使用块来对程序中的大量信息进行排序。
  exercises:
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UGD3xwP1pwACADJt
    created_at: 2012-09-25 00:16:07.000000000 Z
    default_code: ! 'my_array = [3, 4, 8, 7, 1, 6, 5, 9, 2]


      # 调用上面my_array数组的sort!方法。

      # 然后my_array数组就会变成[1, 2, 3, 4, 5, 6, 7, 8, 9]。


'
    entry: ! '数组排序是计算机科学的一个非常常见的问题，因此被广泛研究。已经有很多的 **算法**
      ——定义明确的一系列步骤——每种算法都有其各自的侧重点和优势。


      排序算法可作为计算机科学理论学习的一个很好的起步，不过现在我们要重点关注如何使用Ruby的内建排序方法库（其中实现了一些排序算法）。'
    expect_error: false
    feedback_stats:
      other: 1
      total: 1
    from_console: false
    hint: ! '`.sort`方法对`my_array`的副本排序，而`.sort!`方法则对`my_array`本身排序
      （也就是说，它会破坏原有数组的数据，取而代之的是排序后的数据）。'
    instruction: 使用`.sort!`方法对`my_array`排序。很神奇吧？
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 排序入门
    tabs: []
    test_functions: ! "if code.scan(\".sort!\").length == 0\n  return \"确保对my_array调用了.sort!方法。
      \"\nend\n\nunless my_array == (1..9).to_a\n  return
      \"貌似你没有对my_array排序。请记住要使用.sort!方法，而不是.sort方法。\"\nend\n\nreturn true"
    updated_at: 2012-10-10 08:08:07.633000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UGD38KV/6AACADN1
    created_at: 2012-09-25 00:16:48.000000000 Z
    default_code: ! '# 图书馆使用的排序代码

      books = ["Charlie and the Chocolate Factory", "War and Peace", "Utopia", "A
      Brief History of Time", "A Wrinkle in Time"]


      # 我们该怎样将书本按照字母顺序排序（sort!）？（提示，提示）


'
    entry: ! '假设我们给你五本书，然后要你按书名顺序摆在书架上，你会怎么做？


      大多数排序算法是针对数组项进行排序的，通过比较数组中的两个项来决定哪个放在前面。


      对于我们摆书的例子，如果我们在比较两本书的时候总是优先选择书名英文字母靠前的那本书，
      那么我们就可以设计出一种排序策略。这些“策略”就是前面提到的排序算法。
      我们要做的是确定如何比较数组中的两个项，然后决定Ruby的排序策略。'
    expect_error: false
    feedback_stats: {}
    from_console: false
    hint: ! '我们已经给提示了！如果你还不清楚，那么再给一个提示：使用`.sort!`方法。'
    instruction: 我们可以用什么样的Ruby方法来对`books`数组调用以达到按字母顺序排序的目的？
      在编辑器中试一下吧。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 基础
    tabs: []
    test_functions: ! "if code.scan(\".sort!\").length == 0\n  return \"确保对books数组调用.sort!方法。
      \"\nend\n\nunless books == [\"A Brief History
      of Time\", \"A Wrinkle in Time\", \"Charlie and the Chocolate Factory\", \"Utopia\",
      \"War and Peace\"]\n  return \"貌似你没有对books数组排序。请记住要使用.sort!方法，而不是.sort方法。\"\nend\n\nreturn true"
    updated_at: 2012-10-02 15:10:10.000000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UGD38bz3ZwACACyv
    created_at: 2012-09-25 00:16:49.000000000 Z
    default_code: ! 'book_1 = "A Wrinkle in Time"


      book_2 = "A Brief History of Time"


'
    entry: ! '我们也可以用一个新的操作符来比较两个Ruby对象，这个操作符叫做 **通用比较操作符** `<=>`。
      如果第一个 **操作数** （待比较的项）等于第二个，它返回0；
      如果第一个操作数 *大于* 第二个，它返回1；
      如果第一个操作数 *小于* 第二个，它返回-1。


      传入`sort`方法的块必须返回1、0或者-1。如果块的第一个参数应该在第二个的 *前面* ，则返回-1；
      反之则返回1；如果两者具有相同权重（即两者的值相同），则返回0，意味着它们所处位置相同。'
    expect_error: false
    feedback_stats:
      typo: 1
      total: 1
    from_console: false
    hint: ''
    instruction: 使用通用比较操作符比较`book_1`和`book_2`（`book_1`放在左边，`book_2`放在右边）。
      在单击Run之前想一想，运行结果会是什么？
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 通用比较操作符
    tabs: []
    test_functions: ! "if code.scan(\"<=>\").length == 0\n  return \"别忘了在你的代码中使用通用比较操作符。
      \"\nend\n\nunless result
      == 1\n  return \"貌似你的比较结果不是返回正确的数值（1）。你是使用book_1 <=> book_2来比较吗？\"\nend\n\nreturn
      true"
    updated_at: 2012-10-25 01:05:41.351000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UGD38Z5AfwACADnp
    created_at: 2012-09-25 00:16:49.000000000 Z
    default_code: ! 'books = ["Charlie and the Chocolate Factory", "War and Peace",
      "Utopia", "A Brief History of Time", "A Wrinkle in Time"]


      # 将我们的书本按升序排序

      books.sort! { |firstBook, secondBook| firstBook <=> secondBook }


      # 将你的书本按降序排序


'
    entry: ! "如果我们想按照书名从Z到A排序，即 **降序** 排序，怎么做？
      似乎Ruby的排序方法只能从A到Z排序，即 **升序** 排序。
      \n\n`sort`方法默认排序方式是升序排序，但是它可接受一个块作为参数，指定两个项的比较方式。"
    expect_error: false
    feedback_stats:
      correctness_test_issue: 2
      total: 5
      instructional_text_issue: 2
      other: 1
    from_console: false
    hint: ! "其实并不是 *非要* 使用通用比较操作符的。下面的代码也一样可以：
      \n\n    books.sort do |firstBook, secondBook| \n      if firstBook
      < secondBook  # 按字母顺序firstBook比secondBook靠前\n        return -1\n
      \     else if firstBook > secondBook   # firstBook比secondBook靠后\n        return
      1\n      else   # firstBook和secondBook位置相同\n        return 0\n      end\n
      \   end"
    instruction: 在第8行将`books`按降序排序。参考第4行的升序排序例子。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 来点有技术含量的
    tabs: []
    test_functions: ! "if exception.kind_of? SyntaxError\n  return \"你的语法貌似不大正确。
      参考升序排序的例子！\"\nend\n\nunless
      books == [\"War and Peace\", \"Utopia\", \"Charlie and the Chocolate Factory\",
      \"A Wrinkle in Time\", \"A Brief History of Time\"]\n  return \"
      貌似你没有对books数组进行降序排序。请记住要使用.sort!方法，而不是.sort方法。\"\nend\n\nreturn true"
    updated_at: 2012-11-05 18:28:44.356000000 Z
    view: console_and_editor
  feedback_total: 7
  index: 3
  language_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TyFOXyFuzxlcRMGV
  name: 用块来排序
  num_forum_answers: 6
  num_forum_questions: 4
  published: true
  read_feedback_total: 0
  updated_at: 2012-11-05 18:28:44.377000000 Z
  user_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TwTxhHBXEgADAGwS
  viewable: false
- !ruby/hash:Moped::BSON::Document
  created_at: 2012-09-25 00:17:50.000000000 Z
  default_view: console_and_editor
  entry: 我们这一课学了很多内容，让我们复习一下吧。
  exercises:
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UGD4MFbKXQACADAW
    created_at: 2012-09-25 00:17:52.000000000 Z
    default_code: ''
    entry: 让我们快速温习一下如何创建基本的Ruby方法。
    expect_error: false
    feedback_stats:
      correctness_test_issue: 1
      total: 2
      positive_feedback: 1
    from_console: false
    hint: ! "别忘了方法的语法：\n\n    def method_name(形式参数)\n
      \     # Do something\n    end"
    instruction: 创建一个名为`welcome`的方法，使用`puts`向控制台输出"Welcome to Ruby!"。然后调用它。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 基本方法
    tabs: []
    test_functions: ! "begin\n  welcome\nrescue NameError\n  return \"你定义了名为welcome的方法吗？
      \"\nend\n\nif prints.length == 0\n  return \"貌似你没有使用'puts'向控制台打印任何东西。你是不是忘记调用你的方法了？
      \"\nend\n\nreturn true"
    updated_at: 2012-10-03 20:43:28.000000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UGD4MwP1pwACADY9
    created_at: 2012-09-25 00:17:55.000000000 Z
    default_code: ''
    entry: Good! Now let's make our method a bit more complex by adding arguments
      and a `return` statement.
    expect_error: false
    feedback_stats:
      correctness_test_issue: 1
      total: 2
      positive_feedback: 1
    from_console: false
    hint: ! "Your method should return something like\n\n    \"Welcome to Ruby, #{name}!\""
    instruction: Make your `welcome` method accept a single string parameter, `name`.
      Remove your `puts` statement and replace it with a `return` statement. Your
      method should return a string containing the name it was passed as a parameter.
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: true
    name: Methods With Arguments
    tabs: []
    test_functions: ! "begin\n  welcome(\"Eric\")\nrescue NameError\n  return \"Did
      you define a method called welcome?\"\nrescue ArgumentError\n  return \"Make
      sure your method takes a single parameter.\"\nend\n\nif exception.kind_of? ArgumentError\n
      \ return \"Make sure you pass your method a single string parameter when you
      call it.\"\nend\n\neric = welcome(\"Eric\")\n\nif eric == nil\n  return \"Make
      sure your method has a return statement.\"\nelsif !eric.include? \"Eric\"\n
      \ return \"It looks like your welcome method doesn't include the person's name
      in its output.\"\nend\n\nif code.scan(\"print\").length > 0 || code.scan(\"puts\").length
      > 0\n  return \"It looks like your welcome method prints to the console instead
      of using return.\"\nend\n\nreturn true"
    updated_at: 2012-10-03 20:43:19.000000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UGD4M9QJmwACADyd
    created_at: 2012-09-25 00:17:55.000000000 Z
    default_code: ! 'my_array = [1, 2, 3, 4, 5]


      my_array.each '
    entry: Let's go over what we learned about blocks.
    expect_error: false
    feedback_stats:
      positive_feedback: 1
      total: 1
    from_console: false
    hint: ! "Remember, block syntax looks like this:\n\n    object.method { |placeholder|
      action }"
    instruction: Add a block after the `each` method that squares each element in
      the array and `puts` it to the console.
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: Blocks
    tabs: []
    test_functions: ! "if exception.kind_of? SyntaxError\n  return \"It looks like
      your syntax isn't quite right. Check the Hint if you need help!\"\nend\n\nfor
      num in [1, 4, 9, 16, 25]\n  unless prints.include? num.to_s\n    return \"It
      looks like your block doesn't print the square of each number in my_array to
      the console using 'puts'.\"\n  end\nend\n\nreturn true"
    updated_at: 2012-10-03 20:43:09.000000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UGD4ND3Y+QACADWz
    created_at: 2012-09-25 00:17:56.000000000 Z
    default_code: fruits = ["orange", "apple", "banana", "pear", "grapes"]
    entry: Finally, let's review what we learned about sorting.
    expect_error: false
    feedback_stats:
      instructional_text_issue: 4
      total: 8
      correctness_test_issue: 1
      positive_feedback: 1
      other: 2
    from_console: false
    hint: ! "We prefer the combined comparison operator. Remember, to sort alphabetically,
      we did this:\n\n    books.sort! { |firstBook, secondBook| firstBook <=> secondBook
      }"
    instruction: Use `.sort!` to sort the `fruits` array in *descending* (that is,
      reverse) alphabetical order. You can use the combined comparison operator or
      an `if`/`elsif`/`else` statement.
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: Sorting
    tabs: []
    test_functions: ! "if exception.kind_of? SyntaxError\n  return \"Your syntax doesn't
      look quite right. Check the Hint if you need help!\"\nend\n\nif code.scan(\"<=>\").length
      == 0 && code.scan(\"else\").length == 0\n  return \"Make sure to use either
      <=> or else/elsif/else to compare and sort your fruits.\"\nend\n\nunless fruits
      == [\"pear\", \"orange\", \"grapes\", \"banana\", \"apple\"]\n  return \"It
      looks like you didn't sort the fruits array in descending order. Did you remember
      to use .sort! instead of .sort ?\"\nend\n\nreturn true"
    updated_at: 2012-11-08 02:18:45.197000000 Z
    view: console_and_editor
  feedback_total: 13
  index: 4
  language_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TyFOXyFuzxlcRMGV
  name: Review
  num_forum_answers: 18
  num_forum_questions: 7
  published: true
  read_feedback_total: 0
  updated_at: 2012-11-08 02:18:45.220000000 Z
  user_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TwTxhHBXEgADAGwS
  viewable: false
