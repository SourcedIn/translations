--- !ruby/hash:Moped::BSON::Document
avg_user_rating: 4.476427448926139
classification: :lesson
created_at: 2012-09-20 00:16:09.000000000 Z
domain: :freestyle
down_votes: 182
entry: 你已经对数组有所了解。这一课将教你更多关于数组的内容，然后介绍一种叫做哈希表的全新数据结构，
  最后讲解如何在Ruby中对这两种数据结构进行迭代遍历以编写出高质量的程序。
feedback_total: 108
is_project: false
language_id: !ruby/object:Moped::BSON::ObjectId
  raw_data: !binary |-
    TyFOXyFuzxlcRMGV
level: :beginner
locale: zh
name: 数据结构
num_exercises: 16
num_published_exercises: 16
num_published_sections: 4
num_readiness_feedbacks: 26
num_sections: 4
num_user_ratings: 1909
published: true
published_at: 2012-09-20 18:24:10.000000000 Z
rating: 327.29182623220356
read_feedback_total: 31
readiness: 95.2
recommended: false
review_status: :approved
roles:
  manager: []
  editor: []
topic_id: !ruby/object:Moped::BSON::ObjectId
  raw_data: !binary |-
    T5Ws8pVtgwADABwX
total_user_rating: 8545.5
up_votes: 530
updated_at: 2012-11-26 15:02:21.742000000 Z
user_id: !ruby/object:Moped::BSON::ObjectId
  raw_data: !binary |-
    TwTxhHBXEgADAGwS
sections:
- !ruby/hash:Moped::BSON::Document
  created_at: 2012-09-20 00:16:09.000000000 Z
  default_view: console_and_editor
  entry: 让我们深入探讨一下数组。
  exercises:
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFpgSoXuTAACAGoA
    created_at: 2012-09-20 00:16:10.000000000 Z
    default_code: ''
    entry: 在前面的课程中我们看到数组可以将列表的值存储在一个变量中。
      你可以再数组里放任意多的数字，数字可以重复，而且可以任意顺序！
    expect_error: false
    feedback_stats: {}
    from_console: false
    hint: ! "你可以像这样定义数组：\n\n    var_name = [num1, num2, num3]"
    instruction: 在编辑器中声明一个变量`my_array`，将它赋值为一个任意数组。
      如果你不记得语法，可以查看提示。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 创建数组
    tabs: []
    test_functions: ! "begin\n  my_array\nrescue NameError\n  return \"你声明了一个叫做my_array的数组吗？
      \"\nend\n\nunless my_array.is_a? Array\n  return
      \"貌似你声明的my_array不是数组。\"\nend\n\nif my_array.empty?\n  return
      \"好吧，从技术上讲，你声明了一个数组，但它是空的。放些东西进去吧！\"\nend\n\nreturn
      true"
    updated_at: 2012-09-20 23:14:34.000000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFsoP1+T5gACAFTy
    created_at: 2012-09-20 14:29:19.000000000 Z
    default_code: ! 'demo_array = [100, 200, 300, 400, 500]


      print  # 在此处添加你的代码！'
    entry: ! "数组具备一些有趣的特性：数组中每个都有一个 **索引** 。第一个元素的索引是0，
      下一个的索引是1，再下一个的索引是2，依此类推。我们可以通过这些索引数字来直接访问数组中的元素，像这样：
      \n\n    array = [5, 7,
      9, 2, 0]\n    array[2]\n    # 返回\"9\"，因为\"9\"对应于索引2\n\n
      下表展示了我们示例数组`[5, 7, 9, 2, 0]`的索引详情。第一个元素的索引是0，下一个是1，再下一个是2，依此类推。
      \n\n    +---+---+---+---+---+\n    | 5 | 7 | 9 | 2 | 0 |\n    +---+---+---+---+---+\n
      \     0   1   2   3   4\n\n
      （这里有点过于简化，但可以讲明白目前这个概念。）\n\n
      为了访问索引为`i`的元素，我们可以将该索引放在`array`数组后面的方括号里，像这样：`array[i]`。
      `array[0]`取得第一个元素，`array[1]`取得第二个元素，依此类推。这称为 **索引访问** 或者 **偏移索引** 。"
    expect_error: false
    feedback_stats:
      instructional_text_issue: 2
      total: 2
    from_console: false
    hint: ! "记住，访问索引为`i`的元素是这样的：\n\n    array_name[i]"
    instruction: 使用方括号表示法将`demo_array`数组的第三个元素的值打印到控制台（使用`print`打印）。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 索引访问
    tabs: []
    test_functions: ! "if exception.kind_of? SyntaxError\n  return \"你的语法貌似不大正确。如需帮助可查看提示！
      \"\nend\n\nif
      code.scan(\"demo_array[\").length == 0\n  return \"确保使用方括号表示法将demo_array数组的第三个元素的值打印出来。
      \"\nend\n\nif prints.length
      == 0\n  return \"貌似你没有向控制台打印任何东西。\"\nend\n\nif
      prints.include? \"400\"\n  return \"记住，数组的索引从0开始，不是从1开始！
      \"\nend\n\nunless prints.include? \"300\"\n  return \"貌似你没有将demo_array数组第三个元素的值打印到控制台。
      \"\nend\n\nreturn
      true"
    updated_at: 2012-10-31 02:59:28.995000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFqRkIFUkAACAAg+
    created_at: 2012-09-20 03:46:24.000000000 Z
    default_code: ''
    entry: ! '你可能不知道：数组里面可以放入 *任意* Ruby对象。你可以创建布尔值组成的数组！字符串数组！几乎无穷无尽的可能。'
    expect_error: false
    feedback_stats:
      correctness_test_issue: 1
      total: 4
      other: 2
      instructional_text_issue: 1
    from_console: false
    hint: ''
    instruction: 创建一个名叫`string_array`的数组。然后让它成为...字符串数组！
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 非数字组成的数组
    tabs: []
    test_functions: ! "if code == nil\n  return \"你没有编写任何代码！\"\nend\n\nbegin\n
      \ string_array\nrescue NameError\n  return \"你声明了一个名叫string_array的数组吗？
      \"\nend\n\nunless string_array.is_a? Array\n  return \"貌似string_array不是数组。
      \"\nend\n\nif string_array.empty?\n  return
      \"你的数组空空如也！\"\nend\n\nunless string_array.all?
      {|word| word.is_a? String}\n  return \"貌似你的string_array数组的元素并不全是字符串。
      \"\nend\n\nreturn true"
    updated_at: 2012-10-31 08:30:10.281000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFqRkYrnLgACAAlR
    created_at: 2012-09-20 03:46:25.000000000 Z
    default_code: ! 'multi_d_array = [[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]


      multi_d_array.each { |x| puts "#{x}\n" }'
    entry: ! '你可能会问自己：“如果我可以把 *任何东西* 放进数组里，那么我可以建一个数组的数组吗？”答案是：可以！


      看一看编辑器中的数组的数组。数组的数组被称为 **多维** 数组，因为随着加入的数组增加，原来的数组就越来越不像字符串那个样子了。
      比如，编辑器中的数组是二维数组。'
    expect_error: false
    feedback_stats:
      correctness_test_issue: 24
      total: 46
      other: 15
      instructional_text_issue: 5
      typo: 1
      positive_feedback: 1
    from_console: false
    hint: ''
    instruction: 你可以猜出这个二维数组打印出来是什么样子吗？单击Run看看吧。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 数组的数组
    tabs: []
    test_functions: return true
    updated_at: 2012-10-31 08:33:16.186000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFqRkggK+AACAAZX
    created_at: 2012-09-20 03:46:26.000000000 Z
    default_code: ''
    entry: 你觉得具有相同行数和列数的二维数组像一个正方形吗？数组（像直线）是一维的；数组的数组（像正方形）是二维的。
    expect_error: false
    feedback_stats:
      typo: 1
      total: 1
    from_console: false
    hint: ! "记住，一个简单的二维数组是这个样子的：\n\n    array = [[thing,
      thing], [thing, thing]]"
    instruction: ! '在编辑器中创建你自己的二维数组`my_2d_array`。
      内层数组的元素可以是任何类型：数字、字符串、布尔值等等。如需帮助可查看提示。'
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 创建你自己的
    tabs: []
    test_functions: ! "if code == nil\n  return \"你没有编写任何代码！\"\nend\n\nbegin\n
      \ my_2d_array\nrescue NameError\n  return \"你声明了一个名叫my_2d_array的数组吗？
      \"\nend\n\nunless my_2d_array.is_a? Array\n  return \"貌似my_2d_array不是数组。
      \"\nend\n\nunless my_2d_array.all? {|item| item.is_a?
      Array}\n  return \"貌似my_2d_array数组的元素并不全是数组。\"\nend\n\nreturn
      true"
    updated_at: 2012-10-01 02:35:02.000000000 Z
    view: console_and_editor
  feedback_total: 53
  index: 0
  language_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TyFOXyFuzxlcRMGV
  name: 数组进阶
  num_forum_answers: 18
  num_forum_questions: 10
  published: true
  read_feedback_total: 0
  updated_at: 2012-10-31 08:33:16.220000000 Z
  user_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TwTxhHBXEgADAGwS
  viewable: false
- !ruby/hash:Moped::BSON::Document
  created_at: 2012-09-20 00:16:56.000000000 Z
  default_view: console_and_editor
  entry: ! '哈希表是由键-值对组成的。就像数组，它们也有索引，不过它们的索引不一定是数字：
    索引可以是任何Ruby对象，比如字符串。'
  exercises:
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFpgeUssoAACAHFR
    created_at: 2012-09-20 00:16:57.000000000 Z
    default_code: ! "my_hash = { \"name\" => \"Eric\",\n  \"age\" => 26,\n  \"hungry?\"
      => true\n}\n\nputs my_hash[\"name\"]\nputs my_hash[\"age\"]\nputs my_hash[\"hungry?\"]"
    entry: ! "我们知道数组的索引从0开始到数组长度减一。
      （想一想：一个有四个元素的数组，其索引有0、1、2和3。）\n\n
      但是如果我们想要使用不从0到数组末端的索引，怎么办呢？如果我们不想使用数字来做索引，又怎么办？
      那么我们就需要一种全新的数组结构，叫做 **哈希表**
      （这个叫法来自于英文 **Hash** 的音译；也有另一种叫法是 **散列表** ）。\n\n
      哈希表有点像JavaScript的对象和Python的字典。
      如果你没有学过那些语言，那么你只需要知道哈希表就是 **键-值对** 的集合。
      哈希表的语法是这样的：\n\n    hash
      = { key1 => value1,\n      key2 => value2,\n      key3 => value3\n    }\n\n
      将值赋给键所使用的符号是`=>`。键和值都可以是任何Ruby对象。"
    expect_error: false
    feedback_stats:
      positive_feedback: 2
      total: 3
      other: 1
    from_console: false
    hint: ''
    instruction: ! '在右侧的编辑器中我们已经创建了一个哈希表。看到它是怎样由键和值组成的吗？
      看看它下面的代码：应该有点眼熟吧。单击Run看看会有什么结果！'
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 哈希表入门
    tabs: []
    test_functions: return true
    updated_at: 2012-10-27 07:33:35.464000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFqRmkORIAACAAdB
    created_at: 2012-09-20 03:46:34.000000000 Z
    default_code: ''
    entry: ! "刚才向你展示的是哈希表的 **字面量表示法** 。
      之所以这样说是因为我们通过字面量来描述哈希表：
      用大括号将若干个key => value对括起来。\n\n
      我们同样可以使用`Hash.new`来创建一个哈希表，像这样：\n\n    my_hash = Hash.new\n\n
      将一个变量赋值为`Hash.new`会创建一个新的空哈希表；
      这和将一个空白的大括号（`{}`）赋值给变量是等价的。"
    expect_error: false
    feedback_stats:
      instructional_text_issue: 4
      total: 5
      other: 1
    from_console: false
    hint: ''
    instruction: 使用`Hash.new`创建一个新的哈希表`pets`。
      `Hash`的首字母 *必须* 大写，否则Ruby会不知道你在说什么！
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 使用Hash.new
    tabs: []
    test_functions: ! "if code == nil\n  return \"你没有编写任何代码！\"\nend\n\nbegin\n
      \ pets\nrescue NameError\n  return \"你声明了一个名叫pets的变量吗？\"\nend\n\nunless
      pets.is_a? Hash\n  return \"貌似pets不是哈希表。\"\nend\n\nif code.scan(\"Hash.new\").length
      == 0\n  return \"确保使用Hash.new来创建你的哈希表！\"\nend\n\nreturn
      true"
    updated_at: 2012-10-01 02:36:23.000000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFqRnDV3mwACAAl7
    created_at: 2012-09-20 03:46:36.000000000 Z
    default_code: ''
    entry: ! "向一个哈希表添加内容有两种方式：如果使用字面量表示法创建，
      则可以简单地将键-值对直接添加到大括号中；如果使用`Hash.new`创建的哈希表，
      我们可以用方括号表示法来添加：\n\n    pets
      = Hash.new\n    pets[\"Stevie\"] = \"cat\"\n    # 将键\"Stevie\"及其键值\"cat\"添加到哈希表\n"
    expect_error: false
    feedback_stats:
      instructional_text_issue: 1
      total: 1
    from_console: false
    hint: ''
    instruction: 向你的`pets`哈希表添加一个宠物。你可以用任意的键和键值！
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: true
    name: 向哈希表添加内容
    tabs: []
    test_functions: ! "if exception.kind_of? SyntaxError\n  return \"
      你的语法貌似不大正确——如需帮助可查看教程中的示例。
      \"\nend\n\nif pets.empty?\n  return \"貌似你没有向你的pets哈希表添加键-值对。\"\nend\n\nreturn true"
    updated_at: 2012-09-29 19:35:32.000000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFqRm1ueswACAAZk
    created_at: 2012-09-20 03:46:35.000000000 Z
    default_code: ''
    entry: ! "就像数组那样，我们也可以通过偏移量（即索引）来访问哈希表。
      哈希表中的索引就是键，只需将键名放在方括号里面，我们就可以访问对应的键值。\n\n
      例如，我们有这样一个哈希表：\n\n    pets = { \"Stevie\"
      => \"cat\",\n      \"Bowser\" => \"hamster\",\n      \"Kevin Sorbo\" => \"fish\"\n
      \   }\n\n
      要得到`\"Stevie\"`键的值，我们只需要输入\n\n    pets[\"Stevie\"]\n
      \   # 将会返回\"cat\"\n"
    expect_error: false
    feedback_stats:
      correctness_test_issue: 10
      total: 13
      other: 2
      instructional_text_issue: 1
    from_console: false
    hint: ! "要打印`my_hash`哈希表的`my_key`键的键值，代码是：\n\n    puts my_hash[\"my_key\"]"
    instruction: 使用括号表示法访问你的`pets`哈希表中的键-值对，并使用`puts`将键值打印到控制台。
      如需帮助可查看提示。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: true
    name: 访问哈希表键值
    tabs: []
    test_functions: ! "if prints.length == 0\n  return \"貌似你没有向控制台打印任何东西。
      \"\nend\n\nfor x, y in pets\n  unless prints.include?
      y\n    return \"貌似你没有将你的哈希表键值打印出来。\"\n  end\nend\n\nreturn true"
    updated_at: 2012-10-27 21:53:58.528000000 Z
    view: console_and_editor
  feedback_total: 22
  index: 1
  language_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TyFOXyFuzxlcRMGV
  name: 哈希表
  num_forum_answers: 7
  num_forum_questions: 4
  published: true
  read_feedback_total: 3
  updated_at: 2012-10-27 21:53:58.555000000 Z
  user_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TwTxhHBXEgADAGwS
  viewable: false
- !ruby/hash:Moped::BSON::Document
  created_at: 2012-09-20 00:17:07.000000000 Z
  default_view: console_and_editor
  entry: 我们已经对数组的迭代有所了解。在这一节，我们将对此加强练习，然后学习如何迭代哈希表。
  exercises:
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFpgiXymwwACAG3/
    created_at: 2012-09-20 00:17:13.000000000 Z
    default_code: ! "friends = [\"Milhouse\", \"Ralph\", \"Nelson\", \"Otto\"]\n\nfamily
      = { \"Homer\" => \"dad\",\n  \"Marge\" => \"mom\",\n  \"Lisa\" => \"sister\",\n
      \ \"Maggie\" => \"sister\",\n  \"Abe\" => \"grandpa\",\n  \"Santa's Little Helper\"
      => \"dog\"\n}\n\nfriends.each { |x| puts \"#{x}\" }\nfamily.each { |x, y| puts
      \"#{x}: #{y}\" }"
    entry: ! '还记得我们讲过的[循环和迭代器](http://www.codecademy.com/courses/ruby-beginner-en-XYcN1)课程吗？
      在程序中我们可以使用多种方法来实现循环。当我们循环遍历一个哈希表时，我们说是在 **迭代** 它。


      在这一节我们将使用`.each`迭代器来迭代数组和哈希表
      阅读编辑器中的代码，看看我们的示例代码是怎么做的。'
    expect_error: false
    feedback_stats: {}
    from_console: false
    hint: ''
    instruction: 当你觉得你看懂了编辑器中的代码后，单击Run来看结果。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 再次介绍迭代
    tabs: []
    test_functions: return true
    updated_at: 2012-09-20 16:16:57.000000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFs99/LPjQACAYue
    created_at: 2012-09-20 16:01:59.000000000 Z
    default_code: ! 'languages = ["HTML", "CSS", "JavaScript", "Python", "Ruby"]


'
    entry: ! "对数组迭代比实际看起来要简单。数组元素的索引从0开始，且总是以1递增，而循环正擅长于这种迭代。
      当我们键入：\n\n
      \   array.each { |element| action }\n\n
      我们是在告诉Ruby：“对于该数组的每个元素，执行这个动作。”
      照例，`| |`之间的占位符可以任意命名。"
    expect_error: false
    feedback_stats:
      other: 3
      total: 4
      instructional_text_issue: 1
    from_console: false
    hint: ''
    instruction: 使用`.each`迭代器将`languages`数组的每个元素打印出来。
      确保使用`puts`而不是`print`，这样每个元素占一行。
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 迭代数组
    tabs: []
    test_functions: ! "if prints.length == 0\n  return \"貌似你没有向控制台打印任何东西
      \"\nend\n\nif code.scan(\"puts\").length == 0\n
      \ return \"确保使用puts而不是print！我们需要每个元素占一行。
      \"\nend\n\nfor i in languages\n  unless prints.include? i\n
      \   return \"貌似你没有把languages数组的每个元素打印出来。
      \"\n  end\nend\n\nreturn true"
    updated_at: 2012-10-04 22:55:51.000000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFqSHUYCQQACAA2D
    created_at: 2012-09-20 03:48:45.000000000 Z
    default_code: ! 's = [["ham", "swiss"], ["turkey", "cheddar"], ["roast beef",
      "gruyere"]]


'
    entry: ! "迭代多维数组稍微有点复杂。\n\n
      我们创建了一个二维数组`s`。我们想这样来迭代`s`：
      不是打印每个元素，像这样`[\"ham\", \"swiss\"]`，而是打印元素 *里面* 的元素。\n\n
      如果我们要访问元素`\"swiss\"`，我们会键入：\n\n
      \   s[0][1]\n\n
      意思是：“给我第一个元素的第二个元素”，也就是“swiss”元素。
      如果我们这样迭代一个常规数组：\n\n    array.each { |element| action }\n\n
      那么我们怎样迭代一个数组的数组呢？"
    expect_error: false
    feedback_stats:
      typo: 2
      total: 9
      correctness_test_issue: 3
      instructional_text_issue: 3
      other: 1
    from_console: false
    hint: ! "你的`.each`嵌套应该是这个样子的：\n\n    s.each
      do | x |\n      x.each do | y |\n        puts y\n      end\n    end"
    instruction: ! '我们给你一个提示：使用双层`.each`迭代器来打印`s`数组的每个元素的元素。
      确保使用`puts`而不是`print`，这样每个元素占一行。如果你需要更多的帮助，可查看本练习的提示！'
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 迭代多维数组
    tabs: []
    test_functions: ! "if exception.kind_of? SyntaxError\n  return \"你的语法貌似不大正确。如需帮助可查看提示！
      \"\nend\n\nif prints.length
      == 0\n  return \"貌似你没有向控制台输出任何东西。\"\nend\n\nif
      code.scan(\"puts\").length == 0\n  return \"确保使用puts而不是print！我们需要每个元素占一行。\"\nend\n\nfor i in s\n
      \ for j in i\n    unless prints.include? j\n      return \"貌似你没有把s数组的每个元素打印出来。
      \"\n    end\n  end\nend\n\nreturn
      true"
    updated_at: 2012-10-22 20:17:40.101000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFqSHlueswACAAoq
    created_at: 2012-09-20 03:48:46.000000000 Z
    default_code: ! "secret_identities = { \"The Batman\" => \"Bruce Wayne\",\n  \"Superman\"
      => \"Clark Kent\",\n  \"Wonder Woman\" => \"Diana Prince\",\n  \"Freakazoid\"
      => \"Dexter Douglas\"\n}\n  \n"
    entry: ! "当我们迭代哈希表的时候，我们同样需要搜索不止一个占位符。
      尽管对于多维数组，我们使用嵌套的`.each`调用以循环遍历每个嵌套数组的索引，
      但对于哈希表，我们同时获得键和键值。\n\n
      如果我们想打印一个哈希表的键和键值，我们就键入：\n\n    hash.each
      { |key, value| puts \"#{key}:  #{value}\" }\n\n
      这里的`key`和`value`只是占位符的名称，照例，他们可以是`x`和`y`，`hamburgers`和`hotdogs`，随便你用什么名称。"
    expect_error: false
    feedback_stats:
      correctness_test_issue: 8
      total: 13
      instructional_text_issue: 3
      positive_feedback: 1
      typo: 1
    from_console: false
    hint: ! "例如，你应该打印出：\n\n    The Batman: Bruce Wayne\n    Superman:
      Clark Kent\n\n
      等等。"
    instruction: ! '使用`.each`迭代`secret_identities`哈希表。使用`puts`向控制台打印每个键-值对，键与键值之间用冒号和一个空格隔开（`: `）。'
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 迭代哈希表
    tabs: []
    test_functions: ! "if prints.length == 0\n  return \"貌似你没有向控制台打印任何东西。
      \"\nend\n\nif code.scan(\"puts\").length == 0\n
      \ return \"确保使用puts而不是print！我们需要每个元素占一行打印。
      \"\nend\n\nfor i, j in secret_identities\n  unless prints.include?
      \"#{i}: #{j}\"\n    return \"貌似你没有把由冒号隔开的键-值对打印在单独的一行。如需帮助可查看提示！\"\n  end\nend\n\nreturn
      true"
    updated_at: 2012-10-29 14:10:56.892000000 Z
    view: console_and_editor
  feedback_total: 26
  index: 2
  language_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TyFOXyFuzxlcRMGV
  name: 迭代数组和哈希表
  num_forum_answers: 18
  num_forum_questions: 11
  published: true
  read_feedback_total: 0
  updated_at: 2012-10-29 14:10:56.914000000 Z
  user_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TwTxhHBXEgADAGwS
  viewable: false
- !ruby/hash:Moped::BSON::Document
  created_at: 2012-09-20 00:17:17.000000000 Z
  default_view: console_and_editor
  entry: 让我们花点时间复习本课所学内容。
  exercises:
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFpgjtac7AACAHvM
    created_at: 2012-09-20 00:17:18.000000000 Z
    default_code: ''
    entry: 干得好！你在这一课已经学了很多。让我们来复习一下以确保你真正掌握这些内容。
    expect_error: false
    feedback_stats: {}
    from_console: false
    hint: ! "记住，一个简单的多维数组是这个样子的：\n\n    array
      = [[thing, thing], [thing, thing]]"
    instruction: ! '在编辑器中创建你自己的多维数组`my_array`
      最内层数组的元素可以是你喜欢的任意类型：数字、字符串、布尔值等等。如需帮助可查看提示。'
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: 多维数组
    tabs: []
    test_functions: ! "if code == nil\n  return \"你没有编写任何代码！\"\nend\n\nbegin\n
      \ my_array\nrescue NameError\n  return \"你声明了一个名叫my_array的数组吗？\"\nend\n\nunless
      my_array.is_a? Array\n  return \"貌似my_array不是数组。\"\nend\n\nif
      my_array.empty?\n  return \"好吧，从技术上讲，你声明了一个数组，但它是空的。放些东西进去吧！
      \"\nend\n\nunless my_array.all? {|item| item.is_a? Array}\n
      \ return \"貌似my_array数组的元素并不全是数组。\"\nend\n\nreturn
      true"
    updated_at: 2012-09-20 19:45:55.000000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFqSOAgK+AACAAp5
    created_at: 2012-09-20 03:49:12.000000000 Z
    default_code: ''
    entry: Good! Now let's create a hash. Feel free to use either hash literal notation
      or `Hash.new`.
    expect_error: false
    feedback_stats: {}
    from_console: false
    hint: ! "Hash literal notation looks like this:\n\n    hash_name = { key1 => value1,\n
      \     key2 => value2,\n      key3 => value3\n    }\n\nYou use `Hash.new` like
      this:\n\n    hash_name = Hash.new"
    instruction: Create a hash called `my_hash` in the editor. Give it at least one
      key-value pair.
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: Hashes
    tabs: []
    test_functions: ! "if code == nil\n  return \"You gotta type something!\"\nend\n\nbegin\n
      \ my_hash\nrescue NameError\n  return \"Did you declare a variable called my_hash?\"\nend\n\nunless
      my_hash.is_a? Hash\n  return \"It looks like my_hash isn't a hash.\"\nend\n\nif
      my_hash.empty?\n  return \"It looks like you didn't add any key-value pairs
      to my_hash.\"\nend\n\nreturn true"
    updated_at: 2012-09-20 19:46:45.000000000 Z
    view: console_and_editor
  - _id: !ruby/object:Moped::BSON::ObjectId
      raw_data: !binary |-
        UFqSOeVX7AACABF8
    created_at: 2012-09-20 03:49:13.000000000 Z
    default_code: ! "lunch_order = { \"Ryan\" => \"wonton soup\",\n  \"Eric\" => \"hamburger\",\n
      \ \"Jimmy\" => \"sandwich\",\n  \"Sasha\" => \"salad\",\n  \"Cole\" => \"taco\"\n}\n\n"
    entry: We've done a fair amount of iteration over arrays, so to finish up, let's
      review how to iterate over a hash.
    expect_error: false
    feedback_stats:
      correctness_test_issue: 3
      total: 7
      positive_feedback: 3
      typo: 1
    from_console: false
    hint: ! "For example, you should print out\n\n    wanton soup\n    hamburger\n\nand
      so on."
    instruction: Write the code necessary to print JUST the values of each key-value
      pair in `lunch_order`. (Use `puts` instead of `print` so each value is printed
      on its own line.) Click Run to iterate your way to completing this lesson.
    library:
    - https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js
    load_submission_from_previous_exercise: false
    name: Iterating Over a Hash
    tabs: []
    test_functions: ! "if prints.length == 0\n  return \"It looks like you didn't
      print anything to the console.\"\nend\n\nif code.scan(\"puts\").length == 0\n
      \ return \"Make sure to use puts insead of print! We want each key-value pair
      printed on its own line.\"\nend\n\nfor i, j in lunch_order\n  unless prints.include?
      \"#{j}\"\n    return \"It looks like you aren't printing the value part of each
      key-value pair on its own line. Check the hint if you need help!\"\n  end\nend\n\nfor
      i, j in lunch_order\n  if prints.include? \"#{i}\"\n    return \"It looks like
      you're printing your hash's keys to the console. Only print the values!\"\n
      \ end\nend\n\nreturn true"
    updated_at: 2012-10-09 10:53:53.574000000 Z
    view: console_and_editor
  feedback_total: 7
  index: 3
  language_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TyFOXyFuzxlcRMGV
  name: Review
  num_forum_answers: 6
  num_forum_questions: 6
  published: true
  read_feedback_total: 0
  updated_at: 2012-10-09 10:53:53.631000000 Z
  user_id: !ruby/object:Moped::BSON::ObjectId
    raw_data: !binary |-
      TwTxhHBXEgADAGwS
  viewable: false
